[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Django y React 2024",
    "section": "",
    "text": "Bienvenido",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "index.html#de-qué-trata-este-curso",
    "href": "index.html#de-qué-trata-este-curso",
    "title": "Django y React 2024",
    "section": "¿De qué trata este curso?",
    "text": "¿De qué trata este curso?\nEste curso completo me llevará desde los fundamentos básicos de la programación hasta la construcción de aplicaciones prácticas utilizando los frameworks Django y la biblioteca de React.\nA través de una combinación de teoría y ejercicios prácticos, me sumergiré en los conceptos esenciales del desarrollo web y avanzaré hacia la creación de proyectos del mundo real.\nDesde la configuración del entorno de desarrollo hasta la construcción de una aplicación web de pila completa, este curso me proporcionará una comprensión sólida y experiencia práctica con Django y React.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "index.html#para-quién-es-este-curso",
    "href": "index.html#para-quién-es-este-curso",
    "title": "Django y React 2024",
    "section": "¿Para quién es este curso?",
    "text": "¿Para quién es este curso?\nEste curso está diseñado para principiantes y aquellos con poca o ninguna experiencia en programación.\nYa sea que sea un estudiante curioso, un profesional que busca cambiar de carrera o simplemente alguien que quiere aprender desarrollo web, este curso es para usted. Desde adolescentes hasta adultos, todos son bienvenidos a participar y explorar el emocionante mundo del desarrollo web con Django y React.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "index.html#cómo-contribuir",
    "href": "index.html#cómo-contribuir",
    "title": "Django y React 2024",
    "section": "¿Cómo contribuir?",
    "text": "¿Cómo contribuir?\nValoramos su contribución a este curso. Si encuentra algún error, desea sugerir mejoras o agregar contenido adicional, me encantaría saber de usted.\nPuede contribuir a través del repositorio en linea, donde puede compartir sus comentarios y sugerencias.\nJuntos, podemos mejorar continuamente este recurso educativo para beneficiar a la comunidad de estudiantes y entusiastas de la programación.\nEste ebook ha sido creado con el objetivo de proporcionar acceso gratuito y universal al conocimiento.\nEstará disponible en línea para cualquier persona, sin importar su ubicación o circunstancias, para acceder y aprender a su propio ritmo.\nPuede descargarlo en formato PDF, Epub o verlo en línea en cualquier momento y lugar.\nEsperamos que disfrute este emocionante viaje de aprendizaje y descubrimiento en el mundo del desarrollo web con Django y React!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html",
    "href": "unidades/unidad1/1_git_y_github.html",
    "title": "Git y GitHub 🕹️",
    "section": "",
    "text": "¿Qué es Git y GitHub? 🕹️\nGit y GitHub son herramientas ampliamente utilizadas en el desarrollo de software para el control de versiones y la colaboración en proyectos.\nGit es un sistema de control de versiones distribuido que permite realizar un seguimiento de los cambios en el código fuente durante el desarrollo de software. Fue creado por Linus Torvalds en 2005 y se utiliza mediante la línea de comandos o a través de interfaces gráficas de usuario.\nGitHub, por otro lado, es una plataforma de alojamiento de repositorios Git en la nube. Proporciona un entorno colaborativo donde los desarrolladores pueden compartir y trabajar en proyectos de software de forma conjunta. Además, ofrece características adicionales como seguimiento de problemas, solicitudes de extracción y despliegue continuo.\nEn este tutorial, aprenderás los conceptos básicos de Git y GitHub, así como su uso en un proyecto de software real.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#quiénes-utilizan-git",
    "href": "unidades/unidad1/1_git_y_github.html#quiénes-utilizan-git",
    "title": "Git y GitHub 🕹️",
    "section": "¿Quiénes utilizan Git? 🌍",
    "text": "¿Quiénes utilizan Git? 🌍",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#cómo-se-utiliza-git",
    "href": "unidades/unidad1/1_git_y_github.html#cómo-se-utiliza-git",
    "title": "Git y GitHub 🕹️",
    "section": "¿Cómo se utiliza Git? 💻",
    "text": "¿Cómo se utiliza Git? 💻\n\n\n\nGit en Terminal\n\n\nSe utiliza mediante la línea de comandos o a través de interfaces gráficas de usuario. Proporciona comandos para realizar operaciones como:\n\nInicializar un repositorio,\nRealizar cambios,\nRevisar historial,\nFusionar ramas,\nEntre otros.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#para-qué-sirve-git",
    "href": "unidades/unidad1/1_git_y_github.html#para-qué-sirve-git",
    "title": "Git y GitHub 🕹️",
    "section": "¿Para qué sirve Git? 📝",
    "text": "¿Para qué sirve Git? 📝\n\n\n\n\nSeguimiento de Cambios con Git\n\n\n\nSirve para realizar un seguimiento de los cambios en el código fuente, coordinar el trabajo entre varios desarrolladores, revertir cambios no deseados y mantener un historial completo de todas las modificaciones realizadas en un proyecto.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#por-qué-utilizar-git",
    "href": "unidades/unidad1/1_git_y_github.html#por-qué-utilizar-git",
    "title": "Git y GitHub 🕹️",
    "section": "¿Por qué utilizar Git? 🤔",
    "text": "¿Por qué utilizar Git? 🤔\n\n\n\n\nVentajas de Git\n\n\n\nOfrece varias ventajas, como:\n\nLa capacidad de trabajar de forma distribuida\nLa gestión eficiente de ramas para desarrollar nuevas funcionalidades\nCorregir errores sin afectar la rama principal\nLa posibilidad de colaborar de forma efectiva con otros desarrolladores.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#dónde-puedo-utilizar-git",
    "href": "unidades/unidad1/1_git_y_github.html#dónde-puedo-utilizar-git",
    "title": "Git y GitHub 🕹️",
    "section": "¿Dónde puedo utilizar Git? 🌐",
    "text": "¿Dónde puedo utilizar Git? 🌐\n\n\n\n\nGit en Diferentes Sistemas Operativos\n\n\n\nPuede ser utilizado en cualquier sistema operativo, incluyendo Windows, macOS y Linux. Además, es compatible con una amplia variedad de plataformas de alojamiento de repositorios, siendo GitHub una de las más populares.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#pasos-básicos",
    "href": "unidades/unidad1/1_git_y_github.html#pasos-básicos",
    "title": "Git y GitHub 🕹️",
    "section": "Pasos Básicos 📝",
    "text": "Pasos Básicos 📝",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#instalación-de-visual-studio-code",
    "href": "unidades/unidad1/1_git_y_github.html#instalación-de-visual-studio-code",
    "title": "Git y GitHub 🕹️",
    "section": "Instalación de Visual Studio Code 📥",
    "text": "Instalación de Visual Studio Code 📥\n\n\n\nVisual Studio Code",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#introducción",
    "href": "unidades/unidad1/1_git_y_github.html#introducción",
    "title": "Git y GitHub 🕹️",
    "section": "Introducción",
    "text": "Introducción",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#sección-1-modificar-archivos-en-el-repositorio",
    "href": "unidades/unidad1/1_git_y_github.html#sección-1-modificar-archivos-en-el-repositorio",
    "title": "Git y GitHub 🕹️",
    "section": "Sección 1: Modificar Archivos en el Repositorio",
    "text": "Sección 1: Modificar Archivos en el Repositorio\nEn esta sección, aprenderemos cómo realizar cambios en nuestros archivos y reflejarlos en Git.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#mover-cambios-de-local-a-staging",
    "href": "unidades/unidad1/1_git_y_github.html#mover-cambios-de-local-a-staging",
    "title": "Git y GitHub 🕹️",
    "section": "Mover Cambios de Local a Staging:",
    "text": "Mover Cambios de Local a Staging:\n\nAbre el archivo hello_world.py en Visual Studio Code.\nModifica el mensaje de bienvenida a “Bienvenido” en lugar de “Bienvenio”.\nGuarda los cambios y abre una terminal en Visual Studio Code.\n\nHemos corregido un error en nuestro archivo y queremos reflejarlo en Git.\ndef welcome_message():\n    name = input(\"Ingrese su nombre: \")\n    print(\"Bienvenido,\", name, \"al curso de Django y React!\")\n\nif __name__ == \"__main__\":\n    welcome_message()",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#agregar-cambios-de-local-a-staging",
    "href": "unidades/unidad1/1_git_y_github.html#agregar-cambios-de-local-a-staging",
    "title": "Git y GitHub 🕹️",
    "section": "Agregar Cambios de Local a Staging:",
    "text": "Agregar Cambios de Local a Staging:\ngit add hello_world.py\nHemos añadido los cambios al área de preparación y están listos para ser confirmados en el próximo commit.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#sección-2-confirmar-cambios-en-un-commit",
    "href": "unidades/unidad1/1_git_y_github.html#sección-2-confirmar-cambios-en-un-commit",
    "title": "Git y GitHub 🕹️",
    "section": "Sección 2: Confirmar Cambios en un Commit",
    "text": "Sección 2: Confirmar Cambios en un Commit\nEn esta sección, aprenderemos cómo confirmar los cambios en un commit y guardarlos de manera permanente en nuestro repositorio.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#mover-cambios-de-staging-a-commit",
    "href": "unidades/unidad1/1_git_y_github.html#mover-cambios-de-staging-a-commit",
    "title": "Git y GitHub 🕹️",
    "section": "Mover Cambios de Staging a Commit:",
    "text": "Mover Cambios de Staging a Commit:\ngit commit -m \"Corregir mensaje de bienvenida\"\nHemos confirmado los cambios en un commit con un mensaje descriptivo.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#sección-3-creación-y-fusión-de-ramas",
    "href": "unidades/unidad1/1_git_y_github.html#sección-3-creación-y-fusión-de-ramas",
    "title": "Git y GitHub 🕹️",
    "section": "Sección 3: Creación y Fusión de Ramas",
    "text": "Sección 3: Creación y Fusión de Ramas\nEn esta sección, aprenderemos cómo crear y fusionar ramas en Git para desarrollar nuevas funcionalidades de forma aislada.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#crear-una-nueva-rama",
    "href": "unidades/unidad1/1_git_y_github.html#crear-una-nueva-rama",
    "title": "Git y GitHub 🕹️",
    "section": "Crear una Nueva Rama:",
    "text": "Crear una Nueva Rama:\ngit branch feature\nHemos creado una nueva rama llamada “feature” para desarrollar una nueva funcionalidad.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#implementar-funcionalidades-en-la-rama",
    "href": "unidades/unidad1/1_git_y_github.html#implementar-funcionalidades-en-la-rama",
    "title": "Git y GitHub 🕹️",
    "section": "Implementar Funcionalidades en la Rama:",
    "text": "Implementar Funcionalidades en la Rama:\n\nAbre el archivo hello_world.py en Visual Studio Code.\nAñade una nueva función para mostrar un mensaje de despedida.\nGuarda los cambios y abre una terminal en Visual Studio Code.\nAñade los cambios al área de preparación y confírmalos en un commit.\nCambia a la rama principal con git checkout main.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#fusionar-ramas-con-la-rama-principal",
    "href": "unidades/unidad1/1_git_y_github.html#fusionar-ramas-con-la-rama-principal",
    "title": "Git y GitHub 🕹️",
    "section": "Fusionar Ramas con la Rama Principal:",
    "text": "Fusionar Ramas con la Rama Principal:\ngit merge feature\nHemos fusionado la rama “feature” con la rama principal y añadido la nueva funcionalidad al proyecto.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#sección-4-revertir-cambios-en-un-archivo",
    "href": "unidades/unidad1/1_git_y_github.html#sección-4-revertir-cambios-en-un-archivo",
    "title": "Git y GitHub 🕹️",
    "section": "Sección 4: Revertir Cambios en un Archivo",
    "text": "Sección 4: Revertir Cambios en un Archivo\nEn esta sección, aprenderemos cómo revertir cambios en un archivo y deshacerlos en Git.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#revertir-cambios-en-un-archivo",
    "href": "unidades/unidad1/1_git_y_github.html#revertir-cambios-en-un-archivo",
    "title": "Git y GitHub 🕹️",
    "section": "Revertir Cambios en un Archivo:",
    "text": "Revertir Cambios en un Archivo:\ngit reset hello_world.py\nHemos revertido los cambios en el archivo hello_world.py y deshecho las modificaciones realizadas.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#conclusión",
    "href": "unidades/unidad1/1_git_y_github.html#conclusión",
    "title": "Git y GitHub 🕹️",
    "section": "Conclusión",
    "text": "Conclusión\nEn este tutorial, hemos aprendido a gestionar cambios en nuestro proyecto y moverlos entre diferentes estados en Git. Estos conceptos son fundamentales para trabajar de forma eficiente en proyectos de software y colaborar con otros desarrolladores.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_github_classroom.html",
    "href": "unidades/unidad1/2_github_classroom.html",
    "title": "GitHub Classroom 📒",
    "section": "",
    "text": "¿Qué es GitHub Classroom? 🤔",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>GitHub Classroom 📒</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_github_classroom.html#qué-es-github-classroom",
    "href": "unidades/unidad1/2_github_classroom.html#qué-es-github-classroom",
    "title": "GitHub Classroom 📒",
    "section": "",
    "text": "Github Classroom Windows\n\n\n\n\nGitHub Classroom es una extensión de GitHub que permite a los profesores crear y gestionar asignaciones utilizando repositorios de GitHub. Proporciona una forma organizada y eficiente de distribuir tareas a los estudiantes, recopilar y revisar su trabajo, y proporcionar retroalimentación.\n\n\nFuncionalidades Principales ⚙️\n\nCreación de Asignaciones: Los profesores pueden crear tareas y asignaciones directamente desde GitHub Classroom, proporcionando instrucciones detalladas y estableciendo criterios de evaluación.\nDistribución Automatizada: Una vez que se crea una asignación, GitHub Classroom genera automáticamente repositorios privados para cada estudiante o equipo, basándose en una plantilla predefinida.\nSeguimiento de Progreso: Los profesores pueden realizar un seguimiento del progreso de los estudiantes y revisar sus contribuciones a través de solicitudes de extracción (pull requests) y comentarios en el código.\nRevisión y Retroalimentación: Los estudiantes envían sus trabajos a través de solicitudes de extracción, lo que permite a los profesores revisar y proporcionar retroalimentación específica sobre su código.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>GitHub Classroom 📒</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_github_classroom.html#ejemplo-práctico",
    "href": "unidades/unidad1/2_github_classroom.html#ejemplo-práctico",
    "title": "GitHub Classroom 📒",
    "section": "Ejemplo Práctico",
    "text": "Ejemplo Práctico\n\nCreación de una Asignación en GitHub Classroom 📒\n\nIniciar Sesión: Ingresa a GitHub Classroom con tu cuenta de GitHub y selecciona la opción para crear una nueva asignación.\n\n\n\n\n\nDefinir la Tarea: Proporciona instrucciones claras y detalladas sobre la tarea, incluyendo cualquier código base o recursos necesarios. Establece los criterios de evaluación para guiar a los estudiantes.\n\n\n\n\n\nConfigurar la Plantilla: Selecciona una plantilla de repositorio existente o crea una nueva plantilla que servirá como base para los repositorios de los estudiantes.\n\n\n\n\n\nDistribuir la Asignación: Una vez configurada la asignación, comparte el enlace generado con tus estudiantes para que puedan acceder a sus repositorios privados.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>GitHub Classroom 📒</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_github_classroom.html#trabajo-de-los-estudiantes",
    "href": "unidades/unidad1/2_github_classroom.html#trabajo-de-los-estudiantes",
    "title": "GitHub Classroom 📒",
    "section": "Trabajo de los Estudiantes 🧑‍💻",
    "text": "Trabajo de los Estudiantes 🧑‍💻\n\nAceptar la Asignación: Los estudiantes reciben el enlace de la asignación y aceptan la tarea, lo que les permite crear un repositorio privado basado en la plantilla proporcionada.\n\n\n\n\n\nActualizar el Navegador: Los estudiantes actualizan su navegador para ver el nuevo repositorio creado en su cuenta de GitHub.\n\n\n\n\n\nClonar el Repositorio: Los estudiantes clonan el repositorio asignado en su computadora local utilizando el enlace proporcionado.\n\n\n\n\n\nUtilizar el comando git clone: Aplique el comando git clone para clonar el repositorio en su computadora local.\ngit clone &lt;enlace-del-repositorio&gt;\n\n\n\n\n\nDesarrollar la Tarea: Los estudiantes trabajan en la tarea, realizando los cambios necesarios y realizando commits de manera regular para mantener un historial de su trabajo.\n\n\n\n\n\n\nTip\n\n\n\nPuedes probar el test incorporado con el comando pytest en la terminal, para verificar que el código cumple con los requerimientos\n\n\npytest\nUna vez desarrollado el código de acuerdo a la asignación en local deberían pasar el o los test\n\n\n\n\n\nEnviar la Solicitud de Extracción: Una vez completada la tarea, los estudiantes envían una solicitud de extracción desde su rama hacia la rama principal del repositorio, solicitando la revisión del profesor.\n\n\n\n\n\nUna vez realizado el push se envía al respositorio principal y se ejecutan los test en Github\n\n\n\n\n\n\nTip\n\n\n\nSe recomienda hacer las pruebas en local antes de enviar los cambios al respositorio en Github\n\n\n\n\n\n\n\nEste Action lo que hace es evaluar los cambios realizados\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nSe recomienda hacer las pruebas en local antes de enviar los cambios al respositorio en Github\n\n\n\nRevisión y Retroalimentación: Los profesores revisan las solicitudes de extracción, proporcionan comentarios sobre el código y evalúan el trabajo de los estudiantes según los criterios establecidos.\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nGitHub Classroom ofrece una manera eficiente y organizada de administrar tareas y asignaciones en entornos educativos, fomentando la colaboración, el aprendizaje y la retroalimentación efectiva entre profesores y estudiantes.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>GitHub Classroom 📒</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html",
    "href": "unidades/unidad1/3_docker.html",
    "title": "Docker 🐋",
    "section": "",
    "text": "Conceptos Básicos de Docker 📒",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html#imagen",
    "href": "unidades/unidad1/3_docker.html#imagen",
    "title": "Docker 🐋",
    "section": "Imagen",
    "text": "Imagen\ndocker pull python:3.9-slim\n\nUna imagen de Docker es un paquete de software ligero y portátil que incluye todo lo necesario para ejecutar una aplicación, incluidos el código, las bibliotecas y las dependencias. Las imágenes se utilizan como plantillas para crear contenedores.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html#contenedor",
    "href": "unidades/unidad1/3_docker.html#contenedor",
    "title": "Docker 🐋",
    "section": "Contenedor 📦",
    "text": "Contenedor 📦\ndocker run -d -p 5000:5000 myapp\n\nUn contenedor de Docker es una instancia en tiempo de ejecución de una imagen de Docker. Los contenedores son entornos aislados que ejecutan aplicaciones de forma independiente y comparten recursos del sistema operativo subyacente. Cada contenedor está aislado del entorno de host y otros contenedores, lo que garantiza la consistencia y la portabilidad de las aplicaciones.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html#dockerfile",
    "href": "unidades/unidad1/3_docker.html#dockerfile",
    "title": "Docker 🐋",
    "section": "Dockerfile 📘",
    "text": "Dockerfile 📘\n# Dockerfile\n# Define la imagen base\nFROM python:3.9-slim\n\n# Instala las dependencias necesarias\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    libpq-dev \\\n    libffi-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Establece el directorio de trabajo\nWORKDIR /app\n\n# Copia los archivos de la aplicación al contenedor\nCOPY . .\n\n# Instala las dependencias de Python\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Establece el comando por defecto para ejecutar la aplicación\nCMD [\"python\", \"app.py\"]\n\nUn Dockerfile es un archivo de texto que contiene instrucciones para construir una imagen de Docker. Especifica qué software se instalará en la imagen y cómo configurar el entorno de ejecución. Los Dockerfiles permiten a los desarrolladores definir de manera reproducible el entorno de ejecución de sus aplicaciones y automatizar el proceso de construcción de imágenes.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html#docker-compose",
    "href": "unidades/unidad1/3_docker.html#docker-compose",
    "title": "Docker 🐋",
    "section": "Docker Compose 📙",
    "text": "Docker Compose 📙\n# docker-compose.yml\nversion: '3'\nservices:\n  web:\n    build: .\n    ports:\n      - \"5000:5000\"\n    volumes:\n      - .:/app\n    environment:\n      FLASK_ENV: development\n\nDocker Compose es una herramienta que permite definir y ejecutar aplicaciones Docker multi-contenedor. Permite gestionar la configuración de varios contenedores como un solo servicio, lo que facilita el despliegue y la gestión de aplicaciones complejas que constan de múltiples componentes.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html#definir-un-dockerfile",
    "href": "unidades/unidad1/3_docker.html#definir-un-dockerfile",
    "title": "Docker 🐋",
    "section": "Definir un Dockerfile 📘",
    "text": "Definir un Dockerfile 📘\n# Dockerfile\n# Define la imagen base\nFROM python:3.9-slim\n\n# Instala las dependencias necesarias\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    libpq-dev \\\n    libffi-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Establece el directorio de trabajo\nWORKDIR /app\n\n# Copia los archivos de la aplicación al contenedor\nCOPY . .\n\n# Instala las dependencias de Python\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Establece el comando por defecto para ejecutar la aplicación\nCMD [\"python\", \"app.py\"]\n\nPara utilizar Docker, primero se crea un Dockerfile que especifica cómo construir la imagen de Docker, incluidas las dependencias y la configuración del entorno. El Dockerfile define las capas de la imagen y las instrucciones para configurar el entorno de ejecución de la aplicación.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html#construir-la-imagen",
    "href": "unidades/unidad1/3_docker.html#construir-la-imagen",
    "title": "Docker 🐋",
    "section": "Construir la Imagen 💿",
    "text": "Construir la Imagen 💿\ndocker build -t myapp .\n\nUna vez que se tiene el Dockerfile, se utiliza el comando docker build para construir la imagen de Docker a partir del Dockerfile. Este comando lee las instrucciones del Dockerfile y crea una imagen en función de esas instrucciones. La imagen resultante se puede utilizar para crear y ejecutar contenedores.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html#ejecutar-un-contenedor",
    "href": "unidades/unidad1/3_docker.html#ejecutar-un-contenedor",
    "title": "Docker 🐋",
    "section": "Ejecutar un Contenedor 🖥️",
    "text": "Ejecutar un Contenedor 🖥️\ndocker run -d -p 5000:5000 myapp\n\nDespués de construir la imagen, se ejecuta un contenedor utilizando el comando docker run, especificando la imagen que se utilizará y cualquier configuración adicional necesaria, como puertos expuestos, variables de entorno y volúmenes montados. El contenedor se ejecuta en un entorno aislado y se puede acceder a través de la red local o de Internet, según la configuración.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html#gestionar-contenedores",
    "href": "unidades/unidad1/3_docker.html#gestionar-contenedores",
    "title": "Docker 🐋",
    "section": "Gestionar Contenedores 📦",
    "text": "Gestionar Contenedores 📦\ndocker ps\ndocker stop &lt;container_id&gt;\ndocker rm &lt;container_id&gt;\n\nDocker proporciona varios comandos para gestionar contenedores, como docker ps para ver contenedores en ejecución, docker stop para detener un contenedor y docker rm para eliminar un contenedor. Estos comandos permiten a los usuarios administrar y controlar el ciclo de vida de los contenedores de manera eficiente.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html#docker-compose-1",
    "href": "unidades/unidad1/3_docker.html#docker-compose-1",
    "title": "Docker 🐋",
    "section": "Docker Compose 📙",
    "text": "Docker Compose 📙\n# docker-compose.yml\nversion: '3'\nservices:\n  web:\n    build: .\n    ports:\n      - \"5000:5000\"\n    volumes:\n      - .:/app\n    environment:\n      FLASK_ENV: development\n\nPara aplicaciones más complejas que requieren múltiples contenedores, se utiliza Docker Compose para definir y gestionar la configuración de los contenedores en un archivo YAML. Luego, se utiliza el comando docker-compose para gestionar los servicios definidos en el archivo YAML, lo que simplifica el despliegue y la gestión de aplicaciones multi-contenedor.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/1_introduccion.html",
    "href": "unidades/unidad2/1_introduccion.html",
    "title": "Hola Mundo en Python",
    "section": "",
    "text": "Introdución 🫥\n\nEn este tutorial aprenderemos los conceptos básicos necesarios para configurar nuestro entorno de desarrollo y escribir código en Python. Comenzaremos con la instalación de Python en Windows y luego veremos cómo escribir y ejecutar nuestro primer programa en Python utilizando Visual Studio Code como nuestro editor de texto.\n\n\nPaso 1: Instalación de Python 🐍\nPara poder escribir y ejecutar programas en Python, primero necesitamos instalar Python en nuestra computadora. Python es un lenguaje de programación de alto nivel que es ampliamente utilizado en el desarrollo de aplicaciones web, desarrollo de software, análisis de datos, inteligencia artificial, etc.\n\n\n\n\n\n\nNote\n\n\n\nPython se puede instalar en Windows, Mac y Linux. En este tutorial, veremos cómo instalar Python en Windows.\n\n\n\n\nPaso 2: Instalación de Python en Windows 🪟\n\nDescargar Python\n\nPara instalar Python en Windows, primero necesitamos descargar el instalador de Python desde el sitio web oficial de Python. Para hacer esto, abra su navegador web y vaya a la página de descargas de Python en el siguiente enlace:\n\nhttps://www.python.org/downloads/\n\n\n\n\n\n\nEn la página de descargas, haga clic en el botón de descarga para la última versión de Python. En el momento de escribir este tutorial, la última versión de Python es 3.12.1\n\n\n\n\n\nExcelente, ahora que hemos descargado el instalador de Python, podemos continuar con la instalación de Python en Windows.\n\nInstalar Python\n\nUna vez que el instalador de Python se haya descargado, haga doble clic en el archivo de instalación para iniciar el proceso de instalación. Asegúrese de marcar la casilla que dice “Add Python 3.12 to PATH” antes de hacer clic en el botón “Install Now”.\n\n\n\n\n\nAhora que hemos instalado Python en nuestra computadora, podemos continuar con la configuración de nuestro entorno de desarrollo para escribir y ejecutar programas en Python.\n\nComprobar que tenemos instalado Python\n\nPara comprobar que Python se ha instalado correctamente en nuestra computadora, abra una ventana de comandos y escriba el siguiente comando:\npython --version\n\n\nEste comando imprimirá la versión de Python que está instalada en su computadora. En mi caso, la versión de Python es 3.12.1.\n\n\n\n\n\n\n\nPaso 3: Crear nuestro primer “Hola Mundo” en Python 🗺️.\nAhora que hemos instalado Python en nuestra computadora, podemos comenzar a escribir y ejecutar programas en Python. Para hacer esto, necesitamos un editor de texto para escribir nuestro código y un intérprete de Python para ejecutar nuestro código.\nEn este tutorial, usaremos Visual Studio Code como nuestro editor de texto y el intérprete de Python que instalamos en el paso anterior.\n\nInstalar Visual Studio Code\n\nPara instalar Visual Studio Code, vaya al sitio web oficial de Visual Studio Code en el siguiente enlace:\n\nhttps://code.visualstudio.com/\n\n\n\n\n\n\nEn la página de descargas, haga clic en el botón de descarga para su sistema operativo. En el momento de escribir este tutorial, la última versión de Visual Studio Code es 1.85.2.\nUna vez que el instalador de Visual Studio Code se haya descargado, haga doble clic en el archivo de instalación para iniciar el proceso de instalación. Siga las instrucciones en pantalla para completar la instalación.\n\n\n\n\n\n\nCrear un nuevo archivo de Python\n\nPara crear un nuevo archivo de Python en Visual Studio Code, abra Visual Studio Code y haga clic en el botón “New File” en la barra de herramientas. Luego, escriba el siguiente código en el archivo:\nprint(\"Hola Mundo\")\n\n\n\n\n\n\n\n\nEjecutar el programa\n\nPara ejecutar el programa, haga clic en el botón “Run” en la barra de herramientas. Esto ejecutará el programa y mostrará “Hola Mundo” en la consola.\nprint\n\n¡Felicidades!\nAcabas de escribir y ejecutar tu primer programa en Python. Ahora que has configurado tu entorno de desarrollo y has escrito tu primer programa en Python, puedes comenzar a explorar el lenguaje de programación Python y aprender a escribir programas más complejos.",
    "crumbs": [
      "Unidad 2: Python Básico",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Hola Mundo en Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/2_variable_y_control_de_flujo.html",
    "href": "unidades/unidad2/2_variable_y_control_de_flujo.html",
    "title": "Sintaxis Básica",
    "section": "",
    "text": "Comentarios\nLos comentarios en python se escriben con el símbolo #.",
    "crumbs": [
      "Unidad 2: Python Básico",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Sintaxis Básica</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/2_variable_y_control_de_flujo.html#objetivo",
    "href": "unidades/unidad2/2_variable_y_control_de_flujo.html#objetivo",
    "title": "Sintaxis Básica",
    "section": "Objetivo",
    "text": "Objetivo\nEl objetivo de este repositorio es proporcionar una serie de ejercicios de Python básico para que los principiantes en Python puedan practicar y adquirir experiencia en la sintaxis y estructura de Python.",
    "crumbs": [
      "Unidad 2: Python Básico",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Sintaxis Básica</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/2_variable_y_control_de_flujo.html#qué-debes-hacer",
    "href": "unidades/unidad2/2_variable_y_control_de_flujo.html#qué-debes-hacer",
    "title": "Sintaxis Básica",
    "section": "¿Qué debes hacer?",
    "text": "¿Qué debes hacer?\nDebes Completar cada uno de los ejercicios propuetos a continuación cada uno en su respectivo archivo, el objetivo es adquirir práctica en la sintaxis y estructura de Python. Ejercicios\n\nImprimir Nombre: Un programa simple que imprime tu nombre en la pantalla.\nSuma de los Números del 1 al 10: Un programa que calcula la suma de los números del 1 al 10.\nDatos Personales: Un programa que almacena tu edad, nombre y estatura en variables y las imprime en pantalla.\nPar o Impar: Un programa que determina si un número ingresado por el usuario es par o impar.\nÁrea de un Círculo: Una función que calcula el área de un círculo dado su radio.\nSuma de Dos Números: Una función que recibe dos números como argumentos y devuelve su suma.\nÁrea de un Círculo con Parámetro: Modificación de la función de área de un círculo para recibir el radio como parámetro.\nConversión de Temperatura: Un programa que convierte grados Celsius a Fahrenheit y viceversa.",
    "crumbs": [
      "Unidad 2: Python Básico",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Sintaxis Básica</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/2_variable_y_control_de_flujo.html#pruebas",
    "href": "unidades/unidad2/2_variable_y_control_de_flujo.html#pruebas",
    "title": "Sintaxis Básica",
    "section": "Pruebas",
    "text": "Pruebas\nCada ejercicio tiene su archivo de prueba en el que se utilizan las aserciones de pytest para verificar su correcto funcionamiento. Si por ejemplo quiero aplicar el test del primer ejercicio debo completar el primer ejercicio y comentar los demás, luego ejecutar el comando pytest test_1.py para verificar que el programa funciona correctamente, luego continuar con cada uno de ellos e ir aplicando los test, hasta que al final todos los test pasen y completar la tarea",
    "crumbs": [
      "Unidad 2: Python Básico",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Sintaxis Básica</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/2_variable_y_control_de_flujo.html#ejecución",
    "href": "unidades/unidad2/2_variable_y_control_de_flujo.html#ejecución",
    "title": "Sintaxis Básica",
    "section": "Ejecución",
    "text": "Ejecución\nPara ejecutar cada programa, simplemente ejecute el archivo programa.py. Los archivos de prueba se pueden ejecutar con el comando pytest.",
    "crumbs": [
      "Unidad 2: Python Básico",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Sintaxis Básica</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/3_listas_tuplas.html",
    "href": "unidades/unidad3/3_listas_tuplas.html",
    "title": "Listas",
    "section": "",
    "text": "Tuplas\nLas tuplas son un tipo de dato que nos permite almacenar diferentes valores, en una sola variable.\nEjemplo:\nEjercicio:\nCrear una tupla con los números del 1 al 10, y mostrarla en pantalla.",
    "crumbs": [
      "Unidad 3: Python Intermedio",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Listas</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/3_listas_tuplas.html#descripción-de-la-asignación",
    "href": "unidades/unidad3/3_listas_tuplas.html#descripción-de-la-asignación",
    "title": "Listas",
    "section": "Descripción de la Asignación",
    "text": "Descripción de la Asignación\nEl archivo ejercicio.py contiene un script que pide al usuario que ingrese una lista de compras. El usuario debe ingresar los elementos de la lista separados por comas. El script luego imprime la lista de compras.\nAdemás, el script contiene una función llamada convertir_lista_a_tupla() que está destinada a convertir la lista de compras en una tupla. Esta función aún no está completa.",
    "crumbs": [
      "Unidad 3: Python Intermedio",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Listas</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/3_listas_tuplas.html#tarea-pendiente",
    "href": "unidades/unidad3/3_listas_tuplas.html#tarea-pendiente",
    "title": "Listas",
    "section": "Tarea Pendiente:",
    "text": "Tarea Pendiente:\n\nCompletar la función convertir_lista_a_tupla() para que convierta la lista de compras en una tupla.",
    "crumbs": [
      "Unidad 3: Python Intermedio",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Listas</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/3_listas_tuplas.html#cómo-ejecutar-el-código",
    "href": "unidades/unidad3/3_listas_tuplas.html#cómo-ejecutar-el-código",
    "title": "Listas",
    "section": "Cómo Ejecutar el Código",
    "text": "Cómo Ejecutar el Código\nPara ejecutar el test puedes utilizar el siguiente comando en tu terminal:\npytest -s\nPytest es una biblioteca que facilita la escritura de pruebas en Python. El parámetro -s se utiliza para mostrar la salida de la prueba en la terminal.",
    "crumbs": [
      "Unidad 3: Python Intermedio",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Listas</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/3_listas_tuplas.html#ejemplo-de-salida",
    "href": "unidades/unidad3/3_listas_tuplas.html#ejemplo-de-salida",
    "title": "Listas",
    "section": "Ejemplo de salida:",
    "text": "Ejemplo de salida:\n$ pytest -s\n================================================= test session starts =================================================\nplatform linux -- Python 3.8.10, pytest-6.2.4, pluggy-0.13.1\nrootdir: /home/user/Documentos/Python/Asignacion_Lista_Compras\ncollected 1 item\n\ntest_ejercicio.py Lista de Compras: [manzanas, peras, plátanos, uvas]\n\n================================================== 1 passed in 0.01s ==================================================\n\n\n\n\n\n\nTip\n\n\n\nSe sugiere que practique la sección Ejercicios Python - Nivel 3 para reforzar los conocimientos adquiridos.",
    "crumbs": [
      "Unidad 3: Python Intermedio",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Listas</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/4_conjuntos_diccionarios.html#descripción",
    "href": "unidades/unidad3/4_conjuntos_diccionarios.html#descripción",
    "title": "Diccionarios",
    "section": "Descripción",
    "text": "Descripción\nEsta asignación consiste en corregir y ejecutar un test unitario para un diccionario de frutas. Instrucciones\n\nAbre el archivo ejercicio.py.\nCorrige el diccionario frutas para que tenga las siguientes parejas clave-valor:\n\n\"manzana\" - \"roja\"\n\"banana\" - \"amarilla\"\n\"pera\" - \"verde\"\n\"naranja\" - \"naranja\"\n\nGuarda y cierra el archivo ejercicio.py.\nEjecuta el test unitario test_ejercicio en tu terminal con el comando:\n\npython -m unittest test_ejercicio.py\n\nSi el test unitario se ejecuta sin errores, habrás completado la asignación.\nSi el test unitario arroja errores, corrige el diccionario frutas en ejercicio.py y vuelve a ejecutar el test unitario.\nRepite los pasos 4 a 6 hasta que el test unitario se ejecute sin errores.",
    "crumbs": [
      "Unidad 3: Python Intermedio",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Diccionarios</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/4_conjuntos_diccionarios.html#criterios-de-evaluación",
    "href": "unidades/unidad3/4_conjuntos_diccionarios.html#criterios-de-evaluación",
    "title": "Diccionarios",
    "section": "Criterios de Evaluación",
    "text": "Criterios de Evaluación\n\nEl diccionario frutas en ejercicio.py tiene las parejas clave-valor correctas.\nEl test unitario test_frutas en test_ejercicio.py se ejecuta sin errores.\n\n:::{.callout-tip} Se sugiere revisar la sección de Ejercicios Python - Nivel 4 para poder reforzar los conocimientos necesarios para completar esta sección.",
    "crumbs": [
      "Unidad 3: Python Intermedio",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Diccionarios</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/5_programacion_oo.html",
    "href": "unidades/unidad4/5_programacion_oo.html",
    "title": "Programación Orientada a Objetos",
    "section": "",
    "text": "Asignación\nhttps://classroom.github.com/a/LVvqQCln\nEn esta asignación, aprenderás sobre los conceptos básicos de Programación Orientada a Objetos (POO) mediante la implementación de clases en Python.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Programación Orientada a Objetos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/5_programacion_oo.html#instrucciones",
    "href": "unidades/unidad4/5_programacion_oo.html#instrucciones",
    "title": "Programación Orientada a Objetos",
    "section": "Instrucciones",
    "text": "Instrucciones\n\nLee cuidadosamente el contenido de este repositorio.\nImplementa las clases solicitadas en el archivo main.py.\nRealiza los commits y push necesarios para subir tus cambios a este repositorio.\nVerifica que tus cambios pasen todas las pruebas.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Programación Orientada a Objetos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/5_programacion_oo.html#contenido-del-repositorio",
    "href": "unidades/unidad4/5_programacion_oo.html#contenido-del-repositorio",
    "title": "Programación Orientada a Objetos",
    "section": "Contenido del Repositorio",
    "text": "Contenido del Repositorio\n\nmain.py: Archivo principal donde implementarás tus clases.\ntest_main.py: Archivo de pruebas unitarias.\nREADME.md: Este archivo con las instrucciones de la asignación.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Programación Orientada a Objetos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/5_programacion_oo.html#cómo-ejecutar-las-pruebas",
    "href": "unidades/unidad4/5_programacion_oo.html#cómo-ejecutar-las-pruebas",
    "title": "Programación Orientada a Objetos",
    "section": "Cómo Ejecutar las Pruebas",
    "text": "Cómo Ejecutar las Pruebas\n\nAsegúrate de tener Python instalado en tu sistema.\nAbre una terminal y navega hasta la ubicación de este repositorio.\nEjecuta python -m unittest para correr las pruebas.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Programación Orientada a Objetos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html",
    "href": "unidades/unidad4/6_modulos.html",
    "title": "Módulos",
    "section": "",
    "text": "Paquetes\nUn paquete es un conjunto de módulos organizados en un directorio. Un paquete debe contener un archivo llamado init.py. Este archivo puede estar vacío o contener código de inicialización del paquete.\nEjemplo:\nEjercicio:\nCrear un paquete llamado operaciones que contenga los módulos suma.py, resta.py, multiplicacion.py y division.py. Cada módulo debe contener una función que realice la operación correspondiente.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#creación-de-módulos",
    "href": "unidades/unidad4/6_modulos.html#creación-de-módulos",
    "title": "Módulos",
    "section": "Creación de Módulos",
    "text": "Creación de Módulos\nPara crear un módulo, simplemente se crea un archivo con extensión .py y se definen las funciones y variables que se desean exportar.\nEjemplo:\n# modulo.py\ndef saludar():\n    print(\"Hola, bienvenido a Python\")",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#uso-de-módulos",
    "href": "unidades/unidad4/6_modulos.html#uso-de-módulos",
    "title": "Módulos",
    "section": "Uso de Módulos",
    "text": "Uso de Módulos\nPara usar un módulo, se utiliza la palabra reservada import seguida del nombre del módulo.\nEjemplo:\n# programa.py\nimport modulo\n\nmodulo.saludar()",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#importar-funciones-específicas",
    "href": "unidades/unidad4/6_modulos.html#importar-funciones-específicas",
    "title": "Módulos",
    "section": "Importar Funciones Específicas",
    "text": "Importar Funciones Específicas\nTambién es posible importar funciones específicas de un módulo.\nEjemplo:\n# programa.py\nfrom modulo import saludar\n\nsaludar()",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#importar-con-alias",
    "href": "unidades/unidad4/6_modulos.html#importar-con-alias",
    "title": "Módulos",
    "section": "Importar con Alias",
    "text": "Importar con Alias\nEs posible importar un módulo o función con un alias.\nEjemplo:\n# programa.py\n\nimport modulo as m\n\nm.saludar()",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#importar-todas-las-funciones",
    "href": "unidades/unidad4/6_modulos.html#importar-todas-las-funciones",
    "title": "Módulos",
    "section": "Importar Todas las Funciones",
    "text": "Importar Todas las Funciones\nTambién es posible importar todas las funciones de un módulo.\nEjemplo:\n# programa.py\n\nfrom modulo import *\n\nsaludar()",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#creación-de-paquetes",
    "href": "unidades/unidad4/6_modulos.html#creación-de-paquetes",
    "title": "Módulos",
    "section": "Creación de Paquetes",
    "text": "Creación de Paquetes\nPara crear un paquete, se crea un directorio con el nombre del paquete y se agregan los módulos necesarios. Además, se debe crear un archivo init.py en el directorio del paquete.\nEjemplo:\npaquete/\n    __init__.py\n    modulo1.py\n    modulo2.py",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#uso-de-paquetes",
    "href": "unidades/unidad4/6_modulos.html#uso-de-paquetes",
    "title": "Módulos",
    "section": "Uso de Paquetes",
    "text": "Uso de Paquetes\nPara usar un paquete, se utiliza la palabra reservada import seguida del nombre del paquete y el nombre del módulo.\nEjemplo:\n# programa.py\n\nfrom paquete import modulo1, modulo2\n\nmodulo1.saludar()\nmodulo2.despedir()",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#importar-con-alias-1",
    "href": "unidades/unidad4/6_modulos.html#importar-con-alias-1",
    "title": "Módulos",
    "section": "Importar con Alias",
    "text": "Importar con Alias\nEs posible importar un paquete o módulo con un alias.\nEjemplo:\n\nfrom paquete import modulo1 as m1, modulo2 as m2\n\nm1.saludar()\nm2.despedir()",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#importar-todas-las-funciones-1",
    "href": "unidades/unidad4/6_modulos.html#importar-todas-las-funciones-1",
    "title": "Módulos",
    "section": "Importar Todas las Funciones",
    "text": "Importar Todas las Funciones\nTambién es posible importar todas las funciones de un módulo.\nEjemplo:\n# programa.py\n\nfrom paquete.modulo1 import *\n\nsaludar()",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#instrucciones",
    "href": "unidades/unidad4/6_modulos.html#instrucciones",
    "title": "Módulos",
    "section": "Instrucciones",
    "text": "Instrucciones\n\nLee cuidadosamente el contenido de este repositorio.\nImplementa las funciones solicitadas en el archivo operaciones.py.\nCompleta el programa principal en el archivo programa.py.\nRealiza los commits y push necesarios para subir tus cambios a este repositorio.\nVerifica que tus cambios funcionen correctamente.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#contenido-del-repositorio",
    "href": "unidades/unidad4/6_modulos.html#contenido-del-repositorio",
    "title": "Módulos",
    "section": "Contenido del Repositorio",
    "text": "Contenido del Repositorio\n\noperaciones.py: Archivo de módulo que contiene las funciones para realizar operaciones matemáticas.\nprograma.py: Archivo principal donde se utiliza el módulo operaciones.py.\ntest_operaciones.py: Archivo de pruebas unitarias para verificar las funciones del módulo operaciones.py.\n.gitignore: Archivo que indica a Git qué archivos y directorios debe ignorar al rastrear los cambios en el repositorio.\nrequirements.txt: Archivo que especifica las dependencias del proyecto.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#ejercicio",
    "href": "unidades/unidad4/6_modulos.html#ejercicio",
    "title": "Módulos",
    "section": "Ejercicio",
    "text": "Ejercicio\nCrear un módulo llamado operaciones.py que contenga las siguientes funciones:\n\nsuma(a, b): Retorna la suma de a y b.\nresta(a, b): Retorna la resta de a y b.\nmultiplicacion(a, b): Retorna la multiplicación de a y b.\ndivision(a, b): Retorna la división de a y b. Si b es cero, retorna un mensaje de error.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#cómo-ejecutar-el-programa",
    "href": "unidades/unidad4/6_modulos.html#cómo-ejecutar-el-programa",
    "title": "Módulos",
    "section": "Cómo Ejecutar el Programa",
    "text": "Cómo Ejecutar el Programa\n\nAsegúrate de tener Python instalado en tu sistema.\nAbre una terminal y navega hasta la ubicación de este repositorio.\nInstala las dependencias ejecutando pip install -r requirements.txt.\nEjecuta python programa.py para ver los resultados de las operaciones.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#cómo-ejecutar-las-pruebas",
    "href": "unidades/unidad4/6_modulos.html#cómo-ejecutar-las-pruebas",
    "title": "Módulos",
    "section": "Cómo Ejecutar las Pruebas",
    "text": "Cómo Ejecutar las Pruebas\n\nAsegúrate de tener Python instalado en tu sistema.\nAbre una terminal y navega hasta la ubicación de este repositorio.\nEjecuta python -m unittest para correr las pruebas.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/project001.html",
    "href": "unidades/unidad4/project001.html",
    "title": "Sistema de Gestión de Inventarios",
    "section": "",
    "text": "Asignación\nhttps://classroom.github.com/a/S9EkZXRf\nAprenderás a desarrollar un proyecto de utilizando el lenguaje de programación Python.\nUn sistema de gestión de inventarios es una herramienta que permite realizar un seguimiento y control de los productos o artículos almacenados en un negocio o empresa.\nAprenderás a utilizar diferentes conceptos y técnicas de programación para implementar las funcionalidades clave de este sistema.\nAlgunas de las funcionalidades que implementaremos incluyen:\nAprenderás a crear una estructura de datos para almacenar la información de los productos, como su nombre, descripción, precio, cantidad disponible, etc. También aprenderás a agregar nuevos productos al sistema.\nTe enseñaré cómo implementar funciones de búsqueda y filtrado para encontrar productos específicos en base a diferentes criterios, como el nombre, la categoría o el precio.\nAprenderás a manejar las actualizaciones de inventario, como la compra o venta de productos. Implementaremos funciones que permitan aumentar o disminuir la cantidad disponible de un producto y mantener un registro de estas transacciones.\nTe mostraré cómo generar informes sobre el estado del inventario, como la lista de productos disponibles, los productos más vendidos, los productos con bajo stock, etc. Utilizaremos técnicas de manipulación de datos y generación de informes para presentar esta información de manera clara y concisa.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Sistema de Gestión de Inventarios</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/1_django_fundamentos.html",
    "href": "unidades/unidad5/1_django_fundamentos.html",
    "title": "Introducción a Django",
    "section": "",
    "text": "Conceptos Importantes",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introducción a Django</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/1_django_fundamentos.html#conceptos-importantes",
    "href": "unidades/unidad5/1_django_fundamentos.html#conceptos-importantes",
    "title": "Introducción a Django",
    "section": "",
    "text": "Tip\n\n\n\nAntes de iniciar con Django es necesario conocer el concepto de Entornos Virtuales.\n\n\n\nEntornos Virtuales\n\n\n\n\nVirtual Enviroment\n\n\n\nUn entorno virtual es un entorno de desarrollo aislado que permite instalar paquetes de Python sin afectar al sistema global. Los entornos virtuales son útiles para gestionar las dependencias de un proyecto y para evitar conflictos entre diferentes versiones de los paquetes.\n\nCrear un entorno virtual\nPara crear un entorno virtual, se puede utilizar la herramienta venv de Python.\npython -m venv env\nEste comando creará un directorio llamado env en el directorio actual con el entorno virtual.\n\n\n\n\n\n\nTip\n\n\n\nTambien se puede utilizar virtualenv para crear entornos virtuales.\n\n\n\n\n\nModelo Template View (MTV)\n\n\n\n\nModel View Controller\n\n\n\n\n\n\n\nModel View Template\n\n\n\nDjango sigue el patrón de diseño Modelo Vista Template (MVT). Este patrón de diseño separa la lógica de la aplicación en tres componentes principales: Modelo, Vista y Template.\n\n\n\n\n\n\nTip\n\n\n\nEl archivo URLs.py es el encargado de mapear las URLs de la aplicación a las vistas correspondientes.\n\n\n\nModelo: Es la representación de los datos de la aplicación y las reglas para manipular esos datos. Django utiliza un ORM (Object-Relational Mapping) para interactuar con la base de datos.\nVista: Es la capa de presentación de la aplicación. Se encarga de mostrar los datos al usuario y de interpretar las acciones del usuario.\nTemplate: Es la capa de presentación de la aplicación. Define cómo se muestra la información al usuario. Django utiliza el motor de plantillas Jinja2 para renderizar los templates.\n\n\n\nFormularios\n\n\n\n\nDjango Forms\n\n\n\nLos formularios son una parte importante de cualquier aplicación web. Django proporciona una forma sencilla de crear y procesar formularios en las vistas.\n\n\nAdministrador de Django\n\n\n\n\nDjango Admin\n\n\n\nEl administrador de Django es una interfaz de administración que permite gestionar los datos de la aplicación de forma sencilla. Django genera automáticamente una interfaz de administración basada en los modelos de la aplicación.\n\n\nMiddleware\nEl middleware es una capa de procesamiento que se ejecuta antes y después de cada petición HTTP. Django proporciona un conjunto de middlewares que se pueden utilizar para añadir funcionalidades a la aplicación.\n\n\nAutenticación y Autorización\nDjango proporciona un sistema de autenticación y autorización que permite gestionar los usuarios y los permisos de la aplicación de forma sencilla.\n\n\nInternacionalización\nDjango proporciona soporte para la internacionalización de la aplicación. Permite traducir la aplicación a diferentes idiomas y gestionar las traducciones de forma sencilla.\n\n\nSeguridad\nDjango proporciona un conjunto de medidas de seguridad para proteger la aplicación contra ataques comunes, como la inyección de SQL, la falsificación de solicitudes entre sitios (CSRF) y la inyección de código.\n\n\nTesting\nDjango proporciona un conjunto de herramientas para realizar pruebas unitarias y de integración en la aplicación. Permite probar la lógica de la aplicación y asegurarse de que funciona correctamente.\n\n\nDespliegue\nDjango proporciona un conjunto de herramientas para desplegar la aplicación en un servidor de producción. Permite configurar el entorno de producción y gestionar las actualizaciones de la aplicación de forma sencilla.",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introducción a Django</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html",
    "href": "unidades/unidad5/2_configuracion_inicial.html",
    "title": "Configuración inicial de un proyecto.",
    "section": "",
    "text": "1. Crear un entorno virtual\nEl comando anterior creará un directorio llamado env en el directorio actual, que contendrá un entorno virtual de Python.",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#crear-un-entorno-virtual",
    "href": "unidades/unidad5/2_configuracion_inicial.html#crear-un-entorno-virtual",
    "title": "Configuración inicial de un proyecto.",
    "section": "",
    "text": "Creación de entorno Virtual\n\n\n\npython3 -m venv env",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#activar-el-entorno-virtual",
    "href": "unidades/unidad5/2_configuracion_inicial.html#activar-el-entorno-virtual",
    "title": "Configuración inicial de un proyecto.",
    "section": "2. Activar el entorno virtual",
    "text": "2. Activar el entorno virtual\n\n\n\n\nActivación de entorno Virtual\n\n\n\nsource env/bin/activate\nEl comando anterior activará el entorno virtual en sistemas Unix. En Windows, el comando es:\nenv\\Scripts\\activate\nEste comando tambien se puede dividir en 2 partes:\ncd env/Scripts/\nactivate\nPara desactivar el entorno virtual, simplemente ejecute:\ndeactivate",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#instalar-django",
    "href": "unidades/unidad5/2_configuracion_inicial.html#instalar-django",
    "title": "Configuración inicial de un proyecto.",
    "section": "3. Instalar Django",
    "text": "3. Instalar Django\n\n\n\n\nInstalación de Django\n\n\n\npip install django==4.2\nEl comando anterior instalará la última versión de Django en el entorno virtual.",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#crear-un-proyecto-de-django",
    "href": "unidades/unidad5/2_configuracion_inicial.html#crear-un-proyecto-de-django",
    "title": "Configuración inicial de un proyecto.",
    "section": "4. Crear un proyecto de Django",
    "text": "4. Crear un proyecto de Django\n\n\n\n\nCreación de un Proyecto en Django\n\n\n\ndjango-admin startproject helloWorld .\nEl comando anterior creará un nuevo directorio llamado helloWorld en el directorio actual, que contendrá un proyecto de Django.",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#crear-una-aplicación-de-django",
    "href": "unidades/unidad5/2_configuracion_inicial.html#crear-una-aplicación-de-django",
    "title": "Configuración inicial de un proyecto.",
    "section": "5. Crear una aplicación de Django",
    "text": "5. Crear una aplicación de Django\n\n\n\n\nCreación de una App en Django\n\n\n\npython manage.py startapp hello\nEl comando anterior creará un nuevo directorio llamado hello en el directorio actual, que contendrá una aplicación de Django.\n\n\n\n\n\n\nTip\n\n\n\nRecerda que puedes abrir el editor de código Visual Studio Code con el comando code .",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#crear-una-vista",
    "href": "unidades/unidad5/2_configuracion_inicial.html#crear-una-vista",
    "title": "Configuración inicial de un proyecto.",
    "section": "6. Crear una vista",
    "text": "6. Crear una vista\n\n\n\n\nVistas en Django\n\n\n\n# hello/views.py\n\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse(\"Hello, World!\")",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#configurar-las-url",
    "href": "unidades/unidad5/2_configuracion_inicial.html#configurar-las-url",
    "title": "Configuración inicial de un proyecto.",
    "section": "7. Configurar las URL",
    "text": "7. Configurar las URL\n\n\n\n\nURLs de la App en Django\n\n\n\n# helloWorld/urls.py\n\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path(\"\", include(\"hello.urls\")),\n    path(\"admin/\", admin.site.urls),\n]",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#ejecutar-el-servidor-de-desarrollo",
    "href": "unidades/unidad5/2_configuracion_inicial.html#ejecutar-el-servidor-de-desarrollo",
    "title": "Configuración inicial de un proyecto.",
    "section": "8. Ejecutar el servidor de desarrollo",
    "text": "8. Ejecutar el servidor de desarrollo\n\n\n\n\nServidor de Desarrollo en Django\n\n\n\npython manage.py runserver\nEl comando anterior ejecutará el servidor de desarrollo de Django. Para acceder al servidor, abra un navegador web y vaya a la dirección http://0.0.0.0:8000/.\n\n\n\n\nVisualizar el servidor corriendo desde el navegador\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nPara detener el servidor de desarrollo, presione Ctrl + C en la terminal.",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#crear-una-migración",
    "href": "unidades/unidad5/2_configuracion_inicial.html#crear-una-migración",
    "title": "Configuración inicial de un proyecto.",
    "section": "9. Crear una migración",
    "text": "9. Crear una migración\n\n\n\n\nPreparación de las Migraciones en Django\n\n\n\npython manage.py makemigrations\nEl comando anterior creará una migración para los cambios en los modelos de la base de datos.",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#aplicar-una-migración",
    "href": "unidades/unidad5/2_configuracion_inicial.html#aplicar-una-migración",
    "title": "Configuración inicial de un proyecto.",
    "section": "10. Aplicar una migración",
    "text": "10. Aplicar una migración\n\n\n\n\nPreparación de las Migraciones en Django\n\n\n\npython manage.py migrate\nEl comando anterior aplicará la migración a la base de datos.",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#crear-un-superusuario",
    "href": "unidades/unidad5/2_configuracion_inicial.html#crear-un-superusuario",
    "title": "Configuración inicial de un proyecto.",
    "section": "12. Crear un superusuario",
    "text": "12. Crear un superusuario\n\n\n\n\nCreación de un Superusuario en Django\n\n\n\npython manage.py createsuperuser\nEl comando anterior creará un superusuario para acceder al panel de administración de Django.",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#acceder-al-panel-de-administración",
    "href": "unidades/unidad5/2_configuracion_inicial.html#acceder-al-panel-de-administración",
    "title": "Configuración inicial de un proyecto.",
    "section": "13. Acceder al panel de administración",
    "text": "13. Acceder al panel de administración\n\n\n\n\nLogin Admin en Django\n\n\n\nPara acceder al panel de administración de Django, abra un navegador web y vaya a la dirección http://127.0.0.1:8000/admin/. Inicie sesión con el superusuario creado en el paso anterior.\n\n\n\n\nAdmin en Django",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/3_estructura_archivos_directorios.html",
    "href": "unidades/unidad5/3_estructura_archivos_directorios.html",
    "title": "Estructura de archivos y carpetas",
    "section": "",
    "text": "Django tiene una estructura de archivos y carpetas que se debe seguir para que el proyecto funcione correctamente. A continuación se muestra la estructura de archivos y carpetas de un proyecto Django:\nmyproject/\n    manage.py\n    myproject/\n        __init__.py\n        settings.py\n        urls.py\n        wsgi.py\n\n1\n\nLa carpeta raíz del proyecto.\n\n2\n\nArchivo que se utiliza para interactuar con el proyecto.\n\n3\n\nCarpeta que contiene el proyecto.\n\n4\n\nArchivo que indica que la carpeta es un paquete de Python.\n\n5\n\nArchivo de configuración del proyecto.\n\n6\n\nArchivo que contiene las rutas del proyecto.\n\n7\n\nArchivo que contiene la configuración del servidor web.\n\n\n\nCreación de un proyecto Django\nPara crear un proyecto Django se debe ejecutar el siguiente comando:\n1django-admin startproject myproject .\n\n1\n\nEl punto al final del comando indica que el proyecto se creará en la carpeta actual.\n\n\n\n\nCreación de una aplicación Django\nPara crear una aplicación Django se debe ejecutar el siguiente comando:\n1python manage.py startapp myapp\n\n1\n\nNombre de la aplicación.\n\n\n\n\nConfiguración de la base de datos\nPara configurar la base de datos se debe modificar el archivo settings.py del proyecto. A continuación se muestra un ejemplo de configuración de la base de datos:\nDATABASES = {\n    'default': {\n1        'ENGINE': 'django.db.backends.sqlite3',\n2        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n1\n\nMotor de base de datos.\n\n2\n\nRuta del archivo de la base de datos.\n\n\nEjemplo\nEn este ejemplo crearemos una aplicación que muestre un mensaje en la página principal. Para ello, se deben seguir los siguientes pasos:\n\nCrear un proyecto Django.\nCrear una aplicación Django.\nConfigurar la base de datos.\nCrear una vista.\nCrear una plantilla.\nConfigurar las rutas.\n\n\n\nCrear un proyecto Django\nPara crear un proyecto Django se debe ejecutar el siguiente comando:\ndjango-admin startproject myproject .\n\n\nCrear una aplicación Django\nPara crear una aplicación Django se debe ejecutar el siguiente comando:\npython manage.py startapp myapp\n\n\nConfigurar la base de datos\nPara configurar la base de datos se debe modificar el archivo settings.py del proyecto. A continuación se muestra un ejemplo de configuración de la base de datos:\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\nCrear una vista\nPara crear una vista se debe modificar el archivo views.py de la aplicación. A continuación se muestra un ejemplo de vista:\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse(\"Hello, world!\")\n\n\nCrear una plantilla\nPara crear una plantilla se debe crear una carpeta llamada templates en la carpeta de la aplicación. A continuación se muestra un ejemplo de plantilla:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;MyApp&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello, world!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nConfigurar las rutas\nPara configurar las rutas se debe modificar el archivo urls.py de la aplicación. A continuación se muestra un ejemplo de configuración de las rutas:\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n\n\nEjecutar el servidor\nPara ejecutar el servidor se debe ejecutar el siguiente comando:\npython manage.py runserver\n\n\nAcceder a la aplicación\nPara acceder a la aplicación se debe abrir un navegador web y escribir la siguiente URL:\nhttp://127.0.0.1:8000/\n\n\nCorrer el servidor de desarrollo\nPara correr el servidor de desarrollo se debe ejecutar el siguiente comando:\npython manage.py runserver\nPosiblemente sea necesario preparar las migraciones y aplicarlas a la base de datos:\n1python manage.py makemigrations\n2python manage.py migrate\n\n1\n\nPrepara las migraciones.\n\n2\n\nAplica las migraciones a la base de datos.\n\n\n\n\nCrear una vista\nPara crear una vista se debe modificar el archivo views.py de la aplicación. A continuación se muestra un ejemplo de vista:\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse(\"Hello, world!\")\n\n\nCrear una plantilla\nPara crear una plantilla se debe crear una carpeta llamada templates en la carpeta de la aplicación. A continuación se muestra un ejemplo de plantilla:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;MyApp&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello, world!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nConfigurar las rutas\nPara configurar las rutas se debe modificar el archivo urls.py de la aplicación. A continuación se muestra un ejemplo de configuración de las rutas:\n1from django.urls import path\n2from . import views\n\nurlpatterns = [\n3    path('', views.index, name='index'),\n]\n\n1\n\nImporta la función path.\n\n2\n\nImporta las vistas de la aplicación.\n\n3\n\nConfigura la ruta principal de la aplicación.\n\n\n\n\nAcceder a la aplicación\nPara acceder a la aplicación se debe abrir un navegador web y escribir la siguiente URL:\nhttp://127.0.0.0.1:8000/\nMuy bien hecho! Has creado tu primera aplicación Django. Ahora puedes seguir explorando la documentación oficial de Django para aprender más sobre el framework.\n\n\nAsignación",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Estructura de archivos y carpetas</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html",
    "title": "Modelos",
    "section": "",
    "text": "Vistas en Django\nAhora crearemos las vistas de nuestro sistema en Django. Para ello, crearemos una función para cada vista que renderizará una plantilla HTML.",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#listar-productos",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#listar-productos",
    "title": "Modelos",
    "section": "Listar productos",
    "text": "Listar productos\nPara listar los productos en inventario, crearemos una función listar_productos que renderizará la plantilla listar.html con la lista de productos.\nfrom django.shortcuts import render\nfrom .models import Producto\n\nproductos = []\n\ndef listar_productos(request):\n    return render(request, \"listar.html\", {\"productos\": productos})",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#agregar-producto",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#agregar-producto",
    "title": "Modelos",
    "section": "Agregar producto",
    "text": "Agregar producto\nPara agregar un producto al inventario, crearemos una función agregar_producto que recibe los datos del producto a agregar y lo agrega a la lista de productos.\nfrom django.shortcuts import render, redirect\nfrom .models import Producto\n\nproductos = []\n\ndef agregar_producto(request):\n    if request.method == \"POST\":\n        nombre = request.POST[\"nombre\"]\n        precio = float(request.POST[\"precio\"])\n        cantidad = int(request.POST[\"cantidad\"])\n        producto = Producto(nombre, precio, cantidad)\n        productos.append(producto)\n        return redirect(\"listar_productos\")\n    return render(request, \"agregar.html\")",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#actualizar-producto",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#actualizar-producto",
    "title": "Modelos",
    "section": "Actualizar producto",
    "text": "Actualizar producto\nPara actualizar un producto en el inventario, crearemos una función actualizar_producto que recibe los datos del producto a actualizar y actualiza el precio y la cantidad del producto.\nfrom django.shortcuts import render, redirect\nfrom .models import Producto\n\nproductos = []\n\ndef actualizar_producto(request):\n    if request.method == \"POST\":\n        nombre = request.POST[\"nombre\"]\n        precio = float(request.POST[\"precio\"])\n        cantidad = int(request.POST[\"cantidad\"])\n        for producto in productos:\n            if producto.nombre == nombre:\n                producto.precio = precio\n                producto.cantidad = cantidad\n                break\n        return redirect(\"listar_productos\")\n    return render(request, \"actualizar.html\")",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#eliminar-producto",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#eliminar-producto",
    "title": "Modelos",
    "section": "Eliminar producto",
    "text": "Eliminar producto\nPara eliminar un producto del inventario, crearemos una función eliminar_producto que recibe el nombre del producto a eliminar y lo elimina de la lista de productos.\nfrom django.shortcuts import render, redirect\nfrom .models import Producto\n\nproductos = []\n\ndef eliminar_producto(request):\n    if request.method == \"POST\":\n        nombre = request.POST[\"nombre\"]\n        for producto in productos:\n            if producto.nombre == nombre:\n                productos.remove(producto)\n                break\n        return redirect(\"listar_productos\")\n    return render(request, \"eliminar.html\")",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#buscar-producto",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#buscar-producto",
    "title": "Modelos",
    "section": "Buscar producto",
    "text": "Buscar producto\nPara buscar un producto en el inventario, crearemos una función buscar_producto que recibe el nombre del producto a buscar y renderiza la plantilla buscar.html con el producto encontrado.\nfrom django.shortcuts import render\nfrom .models import Producto\n\nproductos = []\n\ndef buscar_producto(request):\n    if request.method == \"POST\":\n        nombre = request.POST[\"nombre\"]\n        for producto in productos:\n            if producto.nombre == nombre:\n                return render(request, \"buscar.html\", {\"producto\": producto})\n        return render(request, \"buscar.html\", {\"producto\": None})\n    return render(request, \"buscar.html\")",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#base",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#base",
    "title": "Modelos",
    "section": "Base",
    "text": "Base\nCrearemos un archivo base.html que contendrá la estructura base de todas las páginas de nuestro sistema.\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;{% block title %}Inventario{% endblock %}&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/css/bootstrap.min.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        {% block content %}\n        {% endblock %}\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#listar",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#listar",
    "title": "Modelos",
    "section": "Listar",
    "text": "Listar\nCrearemos un archivo listar.html que contendrá la lista de productos en inventario.\n{% extends \"base.html\" %}\n\n{% block title %}Listar productos{% endblock %}\n\n{% block content %}\n&lt;h1&gt;Listar productos&lt;/h1&gt;\n&lt;ul class=\"list-group\"&gt;\n    {% for producto in productos %}\n    &lt;li class=\"list-group\n    -item\"&gt;{{ producto.nombre }} - ${{ producto.precio }} - {{ producto.cantidad }} unidades&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n{% endblock %}",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#agregar",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#agregar",
    "title": "Modelos",
    "section": "Agregar",
    "text": "Agregar\nCrearemos un archivo agregar.html que contendrá un formulario para agregar un producto al inventario.\n{% extends \"base.html\" %}\n\n{% block title %}Agregar producto{% endblock %}\n\n{% block content %}\n&lt;h1&gt;Agregar producto&lt;/h1&gt;\n\n&lt;form action=\"/agregar\" method=\"post\"&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"nombre\" class=\"form-label\"&gt;Nombre&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"precio\" class=\"form-label\"&gt;Precio&lt;/label&gt;\n        &lt;input type=\"number\" class=\"form-control\" id=\"precio\" name=\"precio\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"cantidad\" class=\"form-label\"&gt;Cantidad&lt;/label&gt;\n        &lt;input type=\"number\" class=\"form-control\" id=\"cantidad\" name=\"cantidad\"&gt;\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Agregar&lt;/button&gt;\n&lt;/form&gt;\n{% endblock %}",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#actualizar",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#actualizar",
    "title": "Modelos",
    "section": "Actualizar",
    "text": "Actualizar\nCrearemos un archivo actualizar.html que contendrá un formulario para actualizar un producto en el inventario.\n{% extends \"base.html\" %}\n\n{% block title %}Actualizar producto{% endblock %}\n\n{% block content %}\n&lt;h1&gt;Actualizar producto&lt;/h1&gt;\n&lt;form action=\"/actualizar\" method=\"post\"&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"nombre\" class=\"form-label\"&gt;Nombre&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"precio\" class=\"form-label\"&gt;Precio&lt;/label&gt;\n        &lt;input type=\"number\" class=\"form-control\" id=\"precio\" name=\"precio\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"cantidad\" class=\"form-label\"&gt;Cantidad&lt;/label&gt;\n        &lt;input type=\"number\" class=\"form-control\" id=\"cantidad\" name=\"cantidad\"&gt;\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Actualizar&lt;/button&gt;\n&lt;/form&gt;\n{% endblock %}",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#eliminar",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#eliminar",
    "title": "Modelos",
    "section": "Eliminar",
    "text": "Eliminar\nCrearemos un archivo eliminar.html que contendrá un formulario para eliminar un producto del inventario.\n{% extends \"base.html\" %}\n\n{% block title %}Eliminar producto{% endblock %}\n\n{% block content %}\n&lt;h1&gt;Eliminar producto&lt;/h1&gt;\n&lt;form action=\"/eliminar\" method=\"post\"&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"nombre\" class=\"form-label\"&gt;Nombre&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\"&gt;\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Eliminar&lt;/button&gt;\n&lt;/form&gt;\n{% endblock %}",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#buscar",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#buscar",
    "title": "Modelos",
    "section": "Buscar",
    "text": "Buscar\nCrearemos un archivo buscar.html que contendrá un formulario para buscar un producto en el inventario.\n{% extends \"base.html\" %}\n\n{% block title %}Buscar producto{% endblock %}\n\n{% block content %}\n&lt;h1&gt;Buscar producto&lt;/h1&gt;\n&lt;form action=\"/buscar\" method=\"post\"&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"nombre\" class=\"form-label\"&gt;Nombre&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\"&gt;\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Buscar&lt;/button&gt;\n&lt;/form&gt;\n{% endblock %}",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#urls-en-la-aplicación-y-el-proyecto",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#urls-en-la-aplicación-y-el-proyecto",
    "title": "Modelos",
    "section": "URLs en la aplicación y el proyecto",
    "text": "URLs en la aplicación y el proyecto\nEn el archivo urls.py de la aplicación productos definiremos las URLs de las vistas de nuestro sistema.\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path(\"\", views.listar_productos, name=\"listar_productos\"),\n    path(\"agregar\", views.agregar_producto, name=\"agregar_producto\"),\n    path(\"actualizar\", views.actualizar_producto, name=\"actualizar_producto\"),\n    path(\"eliminar\", views.eliminar_producto, name=\"eliminar_producto\"),\n    path(\"buscar\", views.buscar_producto, name=\"buscar_producto\"),\n]\nEn el archivo urls.py del proyecto inventario incluiremos las URLs de la aplicación productos.\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"productos.urls\")),\n]",
    "crumbs": [
      "Unidad 5: Django Fundamentos",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_git_github-000.html",
    "href": "unidades/ejercicios/ejercicios_git_github-000.html",
    "title": "Ejercicios de Git y Github",
    "section": "",
    "text": "Ejercicio 1\n\nCrear un repositorio en Github\nClonar el repositorio en tu computadora\nCrear un archivo de texto con tu nombre y subirlo al repositorio\nHacer un commit con el mensaje “Agrego mi nombre”\nHacer un push al repositorio\n\n\n\nRespuesta:\n\ngit clone [url del repositorio]\ncd [nombre del repositorio]\necho \"Mi nombre es: [Tu nombre]\" &gt; nombre.txt\ngit add nombre.txt\ngit commit -m \"Agrego mi nombre\"\ngit push origin master\n\n\n\nEjercicio 2\n\nCrear un repositorio en Github\nClonar el repositorio en tu computadora\nCrear un archivo de python que imprima tu nombre\nHacer un commit con el mensaje “Agrego archivo de python”\nHacer un push al repositorio\n\n\n\nRespuesta:\n\ngit clone [url del repositorio]\ncd [nombre del repositorio]\necho \"print('Mi nombre es: [Tu nombre]')\" &gt; nombre.py\ngit add nombre.py\ngit commit -m \"Agrego archivo de python\"\ngit push origin master\n\n\n\nEjercicio 3\n\nCrear un repositorio en Github\nClonar el repositorio en tu computadora\nCrear un archivo de python que imprima un saludo de bienvenida\nHacer un commit con el mensaje “Agrego saludo de bienvenida”\nHacer un push al repositorio\n\n\n\nRespuesta:\n\ngit clone [url del repositorio]\ncd [nombre del repositorio]\necho \"print('Hola, bienvenido')\" &gt; saludo.py\ngit add saludo.py\ngit commit -m \"Agrego saludo de bienvenida\"\ngit push origin master\n\n\n\nEjercicio 4\n\nCrear un repositorio en Github\nClonar el repositorio en tu computadora\nCrear un archivo de python que imprima un saludo de despedida\nHacer un commit con el mensaje “Agrego saludo de despedida”\nHacer un push al repositorio\n\n\n\nRespuesta:\n\ngit clone [url del repositorio]\ncd [nombre del repositorio]\necho \"print('Adios, hasta luego')\" &gt; despedida.py\ngit add despedida.py\ngit commit -m \"Agrego saludo de despedida\"\ngit push origin master\n\n\n\nEjercicio 5\n\nCrear un repositorio en Github\nClonar el repositorio en tu computadora\nCrear un archivo de python que imprima un saludo de bienvenida y un saludo de despedida\nHacer un commit con el mensaje “Agrego saludo de bienvenida y despedida”\nHacer un push al repositorio\n\n\n\nRespuesta:\n\ngit clone [url del repositorio]\ncd [nombre del repositorio]\necho \"print('Hola, bienvenido')\" &gt; saludo.py\necho \"print('Adios, hasta luego')\" &gt; despedida.py\ngit add saludo.py despedida.py\ngit commit -m \"Agrego saludo de bienvenida y despedida\"\ngit push origin master",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Ejercicios de Git y Github</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-001.html",
    "href": "unidades/ejercicios/ejercicios_python-001.html",
    "title": "Ejercicios Python - Nivel 1",
    "section": "",
    "text": "Ejercicio 1",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Ejercicios Python - Nivel 1</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-1",
    "href": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-1",
    "title": "Ejercicios Python - Nivel 1",
    "section": "",
    "text": "Crear un programa que muestre por pantalla la cadena “Hola Mundo!”.\n\n\n\nSolución\n\nprint(\"Hola Mundo!\")",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Ejercicios Python - Nivel 1</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-2",
    "href": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-2",
    "title": "Ejercicios Python - Nivel 1",
    "section": "Ejercicio 2",
    "text": "Ejercicio 2\n\nCrear un programa que muestre por pantalla tu nombre.\n\n\n\nSolución\n\nprint(\"Tu nombre\")",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Ejercicios Python - Nivel 1</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-3",
    "href": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-3",
    "title": "Ejercicios Python - Nivel 1",
    "section": "Ejercicio 3",
    "text": "Ejercicio 3\n\nCrear un programa que pida al usuario que introduzca su nombre y muestre por pantalla la cadena “Hola”, seguido del nombre y un signo de exclamación.\n\n\n\nSolución\n\nnombre = input(\"Introduce tu nombre: \")\nprint(\"Hola\", nombre, \"!\")\nOtra forma de hacerlo:\nnombre = input(\"Introduce tu nombre: \")\nprint(f\"Hola {nombre}!\")",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Ejercicios Python - Nivel 1</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-4",
    "href": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-4",
    "title": "Ejercicios Python - Nivel 1",
    "section": "Ejercicio 4",
    "text": "Ejercicio 4\n\nCrear un programa que pregunte al usuario por el número de horas trabajadas y el coste por hora. Después debe mostrar por pantalla la paga que le corresponde.\n\n\n\nSolución\n\nhoras = float(input(\"Introduce tus horas de trabajo: \"))\ncoste = float(input(\"Introduce lo que cobras por hora: \"))\npaga = horas * coste\nprint(\"Tu paga es de\", paga)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Ejercicios Python - Nivel 1</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-5",
    "href": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-5",
    "title": "Ejercicios Python - Nivel 1",
    "section": "Ejercicio 5",
    "text": "Ejercicio 5\n\nCrear un programa que pida al usuario una cantidad de dolares, una tasa de interés y un número de años. Mostrar por pantalla en cuanto se habrá convertido el capital inicial transcurridos esos años si cada año se aplica la tasa de interés introducida.\nFormula del interés compuesto: Cn = C * (1 + x/100) ^ n\n\n\n\nSolución\n\ncantidad = float(input(\"¿Cantidad a invertir? \"))\ninteres = float(input(\"¿Interés porcentual anual? \"))\naños = int(input(\"¿Años?\"))\nprint(\"Capital final: \", round(cantidad * (interes / 100 + 1) ** años, 2))",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Ejercicios Python - Nivel 1</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-002.html",
    "href": "unidades/ejercicios/ejercicios_python-002.html",
    "title": "Ejercicios Python - Nivel 2",
    "section": "",
    "text": "Ejercicio 1",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Ejercicios Python - Nivel 2</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-1",
    "href": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-1",
    "title": "Ejercicios Python - Nivel 2",
    "section": "",
    "text": "Crear una función que reciba una lista de números y devuelva su media aritmética.\nEjemplo: media_aritmetica([1, 2, 3, 4, 5]) -&gt; 3.0\n\n\n\nPosible solución\n\ndef media_aritmetica(lista):\n    return sum(lista) / len(lista)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Ejercicios Python - Nivel 2</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-2",
    "href": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-2",
    "title": "Ejercicios Python - Nivel 2",
    "section": "Ejercicio 2",
    "text": "Ejercicio 2\n\nCrear una función que reciba una lista de números y devuelva su mediana.\nEjemplo: mediana([1, 2, 3, 4, 5]) -&gt; 3.0\n\n\n\nPosible solución\n\ndef mediana(lista):\n    lista_ordenada = sorted(lista)\n    n = len(lista_ordenada)\n    if n % 2 == 0:\n        return (lista_ordenada[n // 2 - 1] + lista_ordenada[n // 2]) / 2\n    else:\n        return lista_ordenada[n // 2]",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Ejercicios Python - Nivel 2</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-3",
    "href": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-3",
    "title": "Ejercicios Python - Nivel 2",
    "section": "Ejercicio 3",
    "text": "Ejercicio 3\n\nCrear una función que reciba una lista de números y devuelva su moda.\nSi hay más de una moda, devolver una lista con todas las modas.\nSi no hay moda, devolver una lista vacía.\nLa moda es el número que más veces se repite en una lista.\nSi todos los números se repiten el mismo número de veces, no hay moda.\nEjemplo: moda([1, 2, 3, 2, 3, 4]) -&gt; [2, 3]\n\n\n\nPosible solución\n\ndef moda(lista):\n    frecuencias = {}\n    for numero in lista:\n        if numero in frecuencias:\n            frecuencias[numero] += 1\n        else:\n            frecuencias[numero] = 1\n    max_frecuencia = max(frecuencias.values())\n    modas = [numero for numero, frecuencia in frecuencias.items() if frecuencia == max_frecuencia]\n    return modas if len(modas) &gt; 1 else modas[0] if modas else []",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Ejercicios Python - Nivel 2</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-4",
    "href": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-4",
    "title": "Ejercicios Python - Nivel 2",
    "section": "Ejercicio 4",
    "text": "Ejercicio 4\n\nCrear una función que reciba una lista de números y devuelva su desviación típica.\nLa desviación típica es la raíz cuadrada de la varianza.\nLa varianza es la media de los cuadrados de las diferencias entre cada número y la media aritmética.\nEjemplo: desviacion_tipica([1, 2, 3, 4, 5]) -&gt; 1.4142135623730951\n\n\n\nPosible solución\n\ndef desviacion_tipica(lista):\n    media = sum(lista) / len(lista)\n    varianza = sum((numero - media) ** 2 for numero in lista) / len(lista)\n    return varianza ** 0.5",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Ejercicios Python - Nivel 2</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-5",
    "href": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-5",
    "title": "Ejercicios Python - Nivel 2",
    "section": "Ejercicio 5",
    "text": "Ejercicio 5\n\nCrear una función que reciba una lista de números y devuelva su coeficiente de variación.\nEl coeficiente de variación es la desviación típica dividida por la media aritmética.\nEjemplo: coeficiente_variacion([1, 2, 3, 4, 5]) -&gt; 0.4472135954999579\n\n\n\nPosible solución\n\ndef coeficiente_variacion(lista):\n    media = sum(lista) / len(lista)\n    desviacion_tipica = sum((numero - media) ** 2 for numero in lista) / len(lista) ** 0.5\n    return desviacion_tipica / media",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Ejercicios Python - Nivel 2</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-003.html",
    "href": "unidades/ejercicios/ejercicios_python-003.html",
    "title": "Ejercicios Python - Nivel 3",
    "section": "",
    "text": "Ejercicio 1:",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Ejercicios Python - Nivel 3</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-1",
    "href": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-1",
    "title": "Ejercicios Python - Nivel 3",
    "section": "",
    "text": "Crear una lista vacía y agregar elementos a la misma hasta que el usuario ingrese “fin”.\n\n\n\nPosible solución\n\nlista = []\nwhile True:\n    elemento = input(\"Ingrese un elemento: \")\n    if elemento == \"fin\":\n        break\n    lista.append(elemento)\nprint(lista)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Ejercicios Python - Nivel 3</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-2",
    "href": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-2",
    "title": "Ejercicios Python - Nivel 3",
    "section": "Ejercicio 2:",
    "text": "Ejercicio 2:\n\nCrear una lista con los números del 1 al 10 y mostrar los números pares.\n\n\n\nPosible solución\n\nlista = list(range(1, 11))\nfor numero in lista:\n    if numero % 2 == 0:\n        print(numero)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Ejercicios Python - Nivel 3</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-3",
    "href": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-3",
    "title": "Ejercicios Python - Nivel 3",
    "section": "Ejercicio 3:",
    "text": "Ejercicio 3:\n\nCrear una lista con los números del 1 al 10 y mostrar los números impares.\n\n\n\nPosible solución\n\nlista = list(range(1, 11))\nfor numero in lista:\n    if numero % 2 != 0:\n        print(numero)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Ejercicios Python - Nivel 3</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-4",
    "href": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-4",
    "title": "Ejercicios Python - Nivel 3",
    "section": "Ejercicio 4:",
    "text": "Ejercicio 4:\n\nCrear una lista de nombres de estudiantes y mostrar aquellos cuyos nombres comiencen con la letra “A”.\n\n\n\nPosible solución\n\nnombres = [\"Ana\", \"Juan\", \"Pedro\", \"Andrea\", \"Lucía\", \"Antonio\"]\nfor nombre in nombres:\n    if nombre[0].lower() == \"a\":\n        print(nombre)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Ejercicios Python - Nivel 3</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-5",
    "href": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-5",
    "title": "Ejercicios Python - Nivel 3",
    "section": "Ejercicio 5:",
    "text": "Ejercicio 5:\n\nCrear una lista de números y mostrar aquellos que sean mayores a 100.\n\n\n\nPosible solución\n\nnumeros = [10, 20, 150, 200, 300, 400, 500]\nfor numero in numeros:\n    if numero &gt; 100:\n        print(numero)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Ejercicios Python - Nivel 3</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-004.html",
    "href": "unidades/ejercicios/ejercicios_python-004.html",
    "title": "Ejercicios Python - Nivel 4",
    "section": "",
    "text": "Ejercicio 1:",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Ejercicios Python - Nivel 4</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-1",
    "href": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-1",
    "title": "Ejercicios Python - Nivel 4",
    "section": "",
    "text": "Crear un conjunto vacío y agregar elementos al mismo hasta que el usuario ingrese “fin”.\n\n\n\nPosible solución\n\nconjunto = set()\nwhile True:\n    elemento = input(\"Ingrese un elemento o 'fin' para terminar: \")\n    if elemento == \"fin\":\n        break\n    conjunto.add(elemento)\nprint(conjunto)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Ejercicios Python - Nivel 4</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-2",
    "href": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-2",
    "title": "Ejercicios Python - Nivel 4",
    "section": "Ejercicio 2:",
    "text": "Ejercicio 2:\n\nCrear un diccionario vacío y agregar elementos al mismo hasta que el usuario ingrese “fin”.\nCada elemento debe ser una tupla con dos elementos, el primero será la clave y el segundo el valor.\nSi el usuario ingresa una clave que ya existe, se debe mostrar un mensaje de error y no agregar el elemento.\n\n\n\nPosible solución\n\ndiccionario = dict()\nwhile True:\n    clave = input(\"Ingrese una clave o 'fin' para terminar: \")\n    if clave == \"fin\":\n        break\n    if clave in diccionario:\n        print(\"La clave ya existe\")\n        continue\n    valor = input(\"Ingrese un valor: \")\n    diccionario[clave] = valor\nprint(diccionario)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Ejercicios Python - Nivel 4</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-3",
    "href": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-3",
    "title": "Ejercicios Python - Nivel 4",
    "section": "Ejercicio 3:",
    "text": "Ejercicio 3:\n\nCrear un diccionario con los nombres de los meses como claves y la cantidad de días que tienen como valor.\nMostrar los meses que tienen 31 días.\nMostrar los meses que tienen 30 días.\nMostrar los meses que tienen 28 días.\n\n\n\nPosible solución\n\nmeses = {\n    \"enero\": 31,\n    \"febrero\": 28,\n    \"marzo\": 31,\n    \"abril\": 30,\n    \"mayo\": 31,\n    \"junio\": 30,\n    \"julio\": 31,\n    \"agosto\": 31,\n    \"septiembre\": 30,\n    \"octubre\": 31,\n    \"noviembre\": 30,\n    \"diciembre\": 31\n}\n\nmeses_31 = [mes for mes, dias in meses.items() if dias == 31]\nmeses_30 = [mes for mes, dias in meses.items() if dias == 30]\nmeses_28 = [mes for mes, dias in meses.items() if dias == 28]\n\nprint(\"Meses con 31 días:\", meses_31)\nprint(\"Meses con 30 días:\", meses_30)\nprint(\"Meses con 28 días:\", meses_28)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Ejercicios Python - Nivel 4</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-4",
    "href": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-4",
    "title": "Ejercicios Python - Nivel 4",
    "section": "Ejercicio 4:",
    "text": "Ejercicio 4:\n\nCrear un diccionario con los nombres de los meses como claves y la cantidad de paises de sur america mostrando mediante el pais la capital.\nMostrar la capital de Argentina.\nMostrar la capital de Brasil.\nMostrar la capital de Ecuador.\n\n\n\nPosible solución\n\npaises = {\n    \"Argentina\": \"Buenos Aires\",\n    \"Bolivia\": \"La Paz\",\n    \"Brasil\": \"Brasilia\",\n    \"Chile\": \"Santiago\",\n    \"Colombia\": \"Bogotá\",\n    \"Ecuador\": \"Quito\",\n    \"Guyana\": \"Georgetown\",\n    \"Paraguay\": \"Asunción\",\n    \"Perú\": \"Lima\",\n    \"Surinam\": \"Paramaribo\",\n    \"Uruguay\": \"Montevideo\",\n    \"Venezuela\": \"Caracas\"\n}\n\nprint(\"La capital de Argentina es\", paises[\"Argentina\"])\nprint(\"La capital de Brasil es\", paises[\"Brasil\"])\nprint(\"La capital de Ecuador es\", paises[\"Ecuador\"])",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Ejercicios Python - Nivel 4</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-5",
    "href": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-5",
    "title": "Ejercicios Python - Nivel 4",
    "section": "Ejercicio 5:",
    "text": "Ejercicio 5:\n\nCrear un diccinario con los nombres de los presidentes de Ecuador y la fecha en la que asumieron el cargo.\nMostrar la fecha en la que asumió el presidente Eloy Alfaro.\nMostrar la fecha en la que asumió el presidente Garcia Moreno.\n\n\n\nPosible solución\n\npresidentes = {\n\n    \"Gustavo Noboa\": \"23 de noviembre de 2023\",\n    \"Guillermo Lasso\": \"24 de mayo de 2021\",\n    \"Lenín Moreno\": \"24 de mayo de 2017\",\n    \"Rafael Correa\": \"15 de enero de 2007\",\n    \"Jamil Mahuad\": \"10 de agosto de 1998\",\n    \"Abdalá Bucaram\": \"10 de agosto de 1996\",\n    \"Sixto Durán Ballén\": \"10 de agosto de 1992\",\n    \"Rodrigo Borja\": \"10 de agosto de 1988\",\n    \"León Febres Cordero\": \"10 de agosto de 1984\",\n    \"Osvaldo Hurtado\": \"10 de agosto de 1981\",\n    \"Jaime Roldós\": \"10 de agosto de 1979\",\n    \"Guillermo Rodríguez\": \"24 de mayo de 1972\",\n    \"José María Velasco Ibarra\": \"1 de septiembre de 1968\",\n    \"Otto Arosemena\": \"16 de febrero de 1966\",\n    \"Carlos Julio Arosemena\": \"1 de septiembre de 1961\",\n    \"Camilo Ponce Enríquez\": \"1 de septiembre de 1956\",\n    \"José María Velasco Ibarra\": \"1 de septiembre de 1952\",\n    \"Galalza Castro\": \"1 de septiembre de 1947\",\n    \"Carlos Arroyo del Río\": \"1 de septiembre de 1940\",\n    \"Andrés Córdova\": \"1 de septiembre de 1938\",\n    \"Alberto Enríquez Gallo\": \"1 de septiembre de 1937\",\n    \"Federico Páez\": \"1 de septiembre de 1935\",\n    \"José María Velasco Ibarra\": \"1 de septiembre de 1934\",\n    \"Abelardo Montalvo\": \"1 de septiembre de 1933\",\n    \"Neptalí Bonifaz\": \"1 de septiembre de 1931\",\n    \"Isidro Ayora\": \"1 de septiembre de 1926\",\n    \"Gonzalo Córdova\": \"1 de septiembre de 1924\",\n    \"José Luis Tamayo\": \"1 de septiembre de 1920\",\n    \"Leónidas Plaza\": \"1 de septiembre de 1912\",\n    \"Emilio Estrada\": \"1 de septiembre de 1911\",\n    \"Carlos Freile Zaldumbide\": \"1 de septiembre de 1907\",\n    \"Eloy Alfaro\": \"1 de septiembre de 1906\",\n    \"Leónidas Plaza\": \"1 de septiembre de 1901\",\n    \"Eloy Alfaro\": \"1 de septiembre de 1897\",\n    \"Antonio Flores Jijón\": \"1 de septiembre de 1888\",\n    \"José Plácido Caamaño\": \"1 de septiembre de 1883\",\n    \"Pedro José de Arteta\": \"1 de septiembre de 1882\",\n    \"Francisco Xavier León\": \"1 de septiembre de 1878\",\n    \"Antonio Borrero\": \"1 de septiembre de 1875\",\n    \"Gabriel García Moreno\": \"1 de septiembre de 1861\",\n    \"Francisco Robles\": \"1 de septiembre de 1856\",\n    \"Diego Noboa\": \"1 de septiembre de 1850\",\n    \"José Joaquín de Olmedo\": \"1 de septiembre de 1845\",\n    \"Juan José Flores\": \"1 de septiembre de 1830\",\n}\n\nprint(\"Eloy Alfaro asumió el\", presidentes[\"Eloy Alfaro\"])\nprint(\"García Moreno asumió el\", presidentes[\"Gabriel García Moreno\"])",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Ejercicios Python - Nivel 4</span>"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Acerca de mi",
    "section": "",
    "text": "¡Hola! Soy Diego Saavedra, un experto en desarrollo avanzado de software e investigación. Mi amplia experiencia abarca diversas tecnologías, incluyendo Python (Django, Flask, Fast API) y JavaScript (Express, Next, React, Nestjs), así como también tengo conocimientos sólidos en bases de datos, arquitecturas de software y liderazgo ágil.\nMi pasión por la innovación, el desarrollo y la educación me ha llevado a destacarme como un profesional versátil e invaluable. Estoy constantemente listo para enfrentar desafíos técnicos y liderar proyectos de vanguardia.\nMi formación académica incluye el ser estudiante de Doctorado centrado en la inteligencia artificial, estoy enfocando mi investigación en la detección de TDA+H y Asperger mediante Visión Artificial a traves de algoritmos de Inteligencia Artificial. Además, poseo una Maestría en Ciencias de la Computación, con un enfoque en el Deep Learning (Convolutional Neural Network) y la Atención.\nCon esta sólida base académica y experiencia profesional, estoy preparado para aportar soluciones innovadoras y liderar equipos hacia el éxito en cualquier proyecto tecnológico que se me presente.\nAdemás, tengo experiencia en el desarrollo móvil utilizando Flutter y en la implementación de soluciones backend utilizando servicios Backend as a Service (BaaS) como Firebase y Supabase.\nEn el ámbito de la educación, he sido docente de programación en institutos y universidades, actualmente soy parte del Departamento de Ciencias de la Computación en la Universidad de las Fuerzas Armadas ESPE, donde he impartido asignaturas de desarrollo de Software Web con tecnologías como JavaScript, Java y C# asi como sus respectivos frameworks.\nMi experiencia en el desarrollo de software y la investigación me ha permitido adquirir habilidades de liderazgo, trabajo en equipo y comunicación efectiva. Estoy seguro de que mi experiencia y habilidades serán de gran valor para cualquier proyecto tecnológico que se me presente.\nEn este curso aprenderás a desarrollar aplicaciones web con Python y Django, una de las tecnologías más populares y poderosas para el desarrollo de aplicaciones web. A lo largo del curso, aprenderás a crear aplicaciones web desde cero, utilizando Django y Python, y a implementar funcionalidades avanzadas como integración con APIs externas y mucho más.\nTambien veremos tecnologías como Git, Github, Docker, Python, Django, Django Rest Framework, Html5, Css3, JavaScript, Nodejs, Npm y React.\n\n\n¡Estoy emocionado de compartir contigo mi conocimiento y experiencia en el desarrollo de aplicaciones web con Python y Django!"
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "Licencia",
    "section": "",
    "text": "Uso Permitido\nPuedes utilizar el contenido de este curso con fines educativos y personales. Puedes modificar los ejemplos y el código proporcionado para tus propias necesidades de aprendizaje."
  },
  {
    "objectID": "license.html#restricciones",
    "href": "license.html#restricciones",
    "title": "Licencia",
    "section": "Restricciones",
    "text": "Restricciones\nNo tienes permitido redistribuir, vender o utilizar el contenido de este curso para fines comerciales sin el permiso explícito de [Nombre de la Compañía]. Además, no tienes permitido copiar o duplicar el contenido del curso y presentarlo como propio."
  },
  {
    "objectID": "license.html#atribución",
    "href": "license.html#atribución",
    "title": "Licencia",
    "section": "Atribución",
    "text": "Atribución\nSi compartes los ejemplos, los fragmentos de código o el contenido de este curso en línea, te pedimos que proporciones la atribución adecuada a [Nombre de la Compañía]."
  },
  {
    "objectID": "license.html#cambios-en-la-licencia",
    "href": "license.html#cambios-en-la-licencia",
    "title": "Licencia",
    "section": "Cambios en la Licencia",
    "text": "Cambios en la Licencia\n[Nombre de la Compañía] se reserva el derecho de modificar los términos de esta licencia en cualquier momento. Cualquier cambio se reflejará en esta página.\nGracias por respetar nuestros derechos de autor y por tu comprensión."
  }
]