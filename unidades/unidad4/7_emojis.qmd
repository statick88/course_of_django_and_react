::: justify
# Uso de Pypi

Pypi es un repositorio de software para Python. Es un lugar donde los desarrolladores pueden publicar y compartir sus paquetes de Python.

# Utilizar algún paquete de Pypi

![](images/paste-1.png)

Para utilizar un paquete de Pypi, primero debes instalarlo usando **pip**. Por ejemplo, si quieres instalar el paquete **requests**, puedes hacerlo de la siguiente manera:

``` bash
pip install requests
```

Una vez que hayas instalado el paquete, puedes importarlo en tu código de Python y utilizarlo. Por ejemplo:

``` python
import requests

response = requests.get('https://www.google.com')
print(response.status_code)
```

Otro ejemplo es por ejemplo el paquete emoji, que te permite utilizar emojis en tus programas de Python.

![](images/paste-2.png)

``` bash
pip install emoji
```

``` python
import emoji

print(emoji.emojize('Python es :thumbs_up:'))
```

¡Y eso es todo! Ahora puedes utilizar cualquier paquete de Python disponible en Pypi en tus proyectos.

Algunos paquetes pueden ser muy importantes para tu proyecto, así que asegúrate de revisar Pypi para encontrar los paquetes que necesitas.

# Públicar un paquete en Pypi

![](images/paste-7.png)

Si has creado un paquete de Python y quieres compartirlo con otros desarrolladores, puedes publicarlo en Pypi.

Para ello vamos a crear un repositorio en GitHub y subir nuestro paquete.

Lo más importante es tener el script que contiene el código que queremos convertir a paquete.

Para ello vamos a empezar creando un directorio con el nombre de nuestro paquete, por ejemplo **status_checker_api**. Dentro de este directorio vamos a crear un directorio llamado **src** y dentro de este directorio vamos a crear un archivo llamado \_\_init\_\_.py.

Para poder publicar nuestro paquete en Pypi, necesitamos crear un archivo llamado **setup.py** en el directorio raíz de nuestro paquete. Este archivo contiene la información necesaria para empaquetar nuestro paquete y publicarlo en Pypi.

``` python
from setuptools import setup, find_packages

with open('README.md', 'r', encoding="utf-8") as fh:
    long_description = fh.read()

setup(
    name='status_checker_api',
    version='0.2',
    packages=find_packages(where='src'),
    package_dir={'': 'src'},
    install_requires=[
        'requests',
    ],
    entry_points={
        'console_scripts': [
            'api-status-checker=status_checker_api.__main__:main',
        ],
    },
    author='Diego Saavedra',
    author_email='dsaavedra88@gmail.com',
    description='Un paquete para verificar el estado de una API.',
    long_description=long_description,
    long_description_content_type='text/markdown',
    url='https://github.com/statick88/status_checker_api',
    classifiers=[
        'Programming Language :: Python :: 3',
        'License :: OSI Approved :: MIT License',
        'Operating System :: OS Independent',
    ],
    options={
        'egg_info': {
            'egg_base': 'src'
        }
    },
    python_requires='>=3.12',
)
```

# Creación del archivo README.md

``` markdown
# Status Checker API

![Example](../img/paste-5.png)

Un paquete para verificar el estado de una API.

## Instalación

```sh
pip install status_checker_api
```

# Uso

``` sh
status-checker-api
```

Tendra que pasar los parámetros: de la url, por ejemplo **www.google.com** y el tiempo de espera en segundos, por ejemplo **5**.

```         

El código del paquete se encuentra en el directorio **src**. Para poder ejecutar el paquete, necesitamos un archivo llamado **\_\_main\_\_.py** en el directorio **status_checker_api**.

``` python
import requests

def check_status(url):
    try:
        response = requests.get(url)
        return response.status_code
    except requests.exceptions.RequestException as e:
        return f"Error: {e}"
```

# Creación del archivo \_\_main\_\_.py

``` python
from . import check_status

def main():
    url = input('Ingrese la URL de la API: ')
    status = check_status(url)
    print(f'El status de la API es: {status}')

if __name__ == "__main__":
    main()
```

# Creación del archivo LICENSE

``` markdown
MIT License

Copyright (c) 2024 Diego Saavedra

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all

copies or substantial portions of the Software.
```

# Creación del archivo .gitignore

``` text
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
dist/
build/
*.egg-info/
*.egg

# Virtual environments
venv/
env/
ENV/

# IDEs / Editors
.idea/
.vscode/
*.sublime-project
*.sublime-workspace

# Miscellaneous
*.swp
.DS_Store
```

Ahora vamos a subir nuestro paquete a GitHub, es recomendable que podamos publicar el código fuente para poder compartirlo con otros desarrolladores.

# Creación de la cuenta en Pypi

Para poder publicar nuestro paquete en Pypi, necesitamos crear una cuenta en [Pypi](https://pypi.org/account/register/).

Una vez que hayamos creado la cuenta, necesitamos crear un archivo llamado **.pypirc** en nuestro directorio de usuario con la siguiente información:

``` text
[pypi]
  username = statick
  password = pypi-token
```

# Publicar el paquete en Pypi

Para publicar nuestro paquete en Pypi, necesitamos instalar el paquete **twine**.

Twine es una herramienta que nos permite subir paquetes de Python a Pypi.

``` bash
pip install twine
```

Es recomandable que tengamos la última versión de **twine**.

``` bash
pip install --upgrade twine
```

Una vez que hayamos instalado y actualizado **twine**, podemos publicar nuestro paquete en Pypi de la siguiente manera:

``` bash
python -m pip install --upgrade build
```

El comando anterior instala el paquete **build** que necesitamos para construir nuestro paquete.

``` bash
python -m build
```

El comando anterior crea un archivo **dist** en el directorio raíz de nuestro paquete. Este archivo contiene el paquete que vamos a publicar en Pypi. Es decir los archivos **.tar.gz** y **.whl**.

Estos archivos son los que vamos a subir a Pypi.

``` bash
python -m twine upload --repository pypi dist/* --verbose
```

El comando anterior sube nuestro paquete a Pypi. Necesitamos proporcionar nuestro nombre de usuario y contraseña de Pypi para autenticarnos.

![](images/paste-9.png)

¡Y eso es todo! Ahora puedes compartir tu paquete de Python con otros desarrolladores en Pypi.

# Instalar el paquete

![](images/paste-4.png)

Para instalar el paquete que acabamos de publicar en Pypi, necesitamos usar **pip**.

``` bash
pip install status_checker_api
```

Una vez que hayamos instalado el paquete, podemos utilizarlo en nuestro código de Python.

# Uso del paquete

![](images/paste-5.png)

``` basht
api-status-checker
```

¡Y eso es todo! Ahora puedes actualizar tu paquete de Python en Pypi.

No olvides cambiar la versión de tu paquete en el archivo **setup.py** antes de subirlo a Pypi.

# Conclusión

En este tutorial, aprendiste cómo publicar un paquete de Python en Pypi. Ahora puedes compartir tu paquete con otros desarrolladores y contribuir a la comunidad de Python.

:::