:::{.justify}
# P√∫blicar un paquete en Pypi

:::{.center}
![](images/paste-10.png)
:::

En este tutorial vamos a publicar un paquete llamado **status-checker-api** en Pypi.

Si has creado un paquete de Python y quieres compartirlo con otros desarrolladores, puedes publicarlo en Pypi.

Para ello vamos a crear un repositorio en **GitHub** y subir nuestro paquete, esta pr√°ctica es importante para poder compartir nuestro paquete con otros desarrolladores.

En el caso de este tutorial, el repositorio se encuentra en [status_checker_api](https://github.com/statick88/status_checker_api)

Lo m√°s importante es tener el o los scripts que contienen el c√≥digo que queremos convertir a paquete.

Para ello vamos a empezar creando un directorio con el nombre de nuestro paquete, por ejemplo **status_checker_api**.

A continuaci√≥n se visualiza la estructura de nuestro paquete.

``` plaintext
‚îú‚îÄ‚îÄ dist
‚îÇ   ‚îú‚îÄ‚îÄ status_checker_api-0.5-py3-none-any.whl
‚îÇ   ‚îî‚îÄ‚îÄ status_checker_api-0.5.tar.gz
‚îú‚îÄ‚îÄ img
‚îÇ   ‚îî‚îÄ‚îÄ paste-5.png
‚îú‚îÄ‚îÄ LICENSE
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ setup.py
‚îî‚îÄ‚îÄ src
    ‚îú‚îÄ‚îÄ status_checker_api
    ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
    ‚îÇ   ‚îú‚îÄ‚îÄ __main__.py
    ‚îÇ   ‚îî‚îÄ‚îÄ __pycache__
    ‚îÇ       ‚îú‚îÄ‚îÄ __init__.cpython-312.pyc
    ‚îÇ       ‚îî‚îÄ‚îÄ __main__.cpython-312.pyc
    ‚îú‚îÄ‚îÄ status_checker_api.egg-info
    ‚îÇ   ‚îú‚îÄ‚îÄ dependency_links.txt
    ‚îÇ   ‚îú‚îÄ‚îÄ entry_points.txt
    ‚îÇ   ‚îú‚îÄ‚îÄ PKG-INFO
    ‚îÇ   ‚îú‚îÄ‚îÄ requires.txt
    ‚îÇ   ‚îú‚îÄ‚îÄ SOURCES.txt
    ‚îÇ   ‚îî‚îÄ‚îÄ top_level.txt
    ‚îî‚îÄ‚îÄ tests
        ‚îú‚îÄ‚îÄ __init__.py
        ‚îú‚îÄ‚îÄ __pycache__
        ‚îÇ   ‚îú‚îÄ‚îÄ __init__.cpython-312.pyc
        ‚îÇ   ‚îî‚îÄ‚îÄ test_status_checker_api.cpython-312-pytest-8.3.2.pyc
        ‚îî‚îÄ‚îÄ test_status_checker_api.py
```

Dentro de este **status_checker_api** vamos a crear un directorio llamado **src** y dentro de este directorio vamos a crear un archivo llamado **\_\_init\_\_.py**, en este ejemplo tambien crearemos el archivo **\_\_main\_\_.py**.

Para poder publicar nuestro paquete en Pypi, necesitamos crear un archivo llamado **setup.py** en el directorio ra√≠z de nuestro paquete. Este archivo contiene la informaci√≥n necesaria para empaquetar nuestro paquete y publicarlo en Pypi.

``` python
from setuptools import setup, find_packages

with open('README.md', 'r', encoding="utf-8") as fh:
    long_description = fh.read()

setup(
    name='status_checker_api',
    version='0.5',
    packages=find_packages(where='src'),
    package_dir={'': 'src'},
    install_requires=[
        'requests',
    ],
    entry_points={
        'console_scripts': [
            'status-checker-api=status_checker_api.__main__:main',
        ],
    },
    author='Diego Saavedra',
    author_email='dsaavedra88@gmail.com',
    description='Un paquete para verificar el estado de una API.',
    long_description=long_description,
    long_description_content_type='text/markdown',
    url='https://github.com/statick88/status_checker_api',
    classifiers=[
        'Programming Language :: Python :: 3',
        'License :: OSI Approved :: MIT License',
        'Operating System :: OS Independent',
    ],
    options={
        'egg_info': {
            'egg_base': 'src'
        }
    },
    python_requires='>=3.12',
)
```

# Creaci√≥n del archivo README.md

``` markdown
# status_checker_api

Un paquete para verificar el estado de una API.

## Instalaci√≥n

pip install status_checker_api

## Uso

api-status-checker

Ingrese la URL de la API: https://www.google.com

El status de la API es: 200

## Licencia

MIT License

## Autor

Diego Saavedra
```

El c√≥digo del paquete se encuentra en el directorio **src**. Para poder ejecutar el paquete, necesitamos un archivo llamado **\_\_init\_\_.py** en el directorio **status_checker_api**.

``` python
import requests
from urllib.parse import urlparse

def check_status(url):
    # Aseg√∫rate de que la URL tenga un esquema (http o https)
    parsed_url = urlparse(url)
    if not parsed_url.scheme:
        url = 'https://' + url
    
    try:
        response = requests.get(url)
        return f"‚úÖ La URL est√° activa con c√≥digo de estado: {response.status_code}"  # Devuelve el mensaje con el c√≥digo de estado
    except requests.exceptions.RequestException as e:
        return f"‚ùå Error: {e} üòî"  # Devuelve el mensaje de error con una x
```

Analizando el c√≥digo anterior, podemos ver que el paquete **status_checker_api** contiene una funci√≥n llamada **check_status** que verifica el estado de una API. La funci√≥n toma una URL como argumento y devuelve un mensaje con el estado de la API.

# Creaci√≥n del archivo \_\_main\_\_.py

``` python
from status_checker_api import check_status

def main():
    url = input('Ingrese la URL de la API: ')
    status = check_status(url)
    print(f'El status de la API es: {status}')

if __name__ == "__main__":
    main()
```

El archivo **\_\_main\_\_.py** contiene el c√≥digo principal del paquete. Este archivo importa la funci√≥n **check_status** del paquete **status_checker_api** y la utiliza para verificar el estado de una API.

# Creaci√≥n del archivo LICENSE

``` markdown
MIT License

Copyright (c) 2024 Diego Saavedra

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all

copies or substantial portions of the Software.
```

El archivo **LICENSE** contiene la licencia del paquete. En este caso, utilizamos la licencia MIT.

# Creaci√≥n del archivo .gitignore

``` text
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
dist/
build/
*.egg-info/
*.egg

# Virtual environments
venv/
env/
ENV/

# IDEs / Editors
.idea/
.vscode/
*.sublime-project
*.sublime-workspace

# Miscellaneous
*.swp
.DS_Store
```

El archivo **.gitignore** contiene los archivos y directorios que no queremos incluir en nuestro repositorio de Git. En este caso, ignoramos los archivos y directorios generados por Python y los entornos virtuales.

# Creaci√≥n de la cuenta en Pypi

Para poder publicar nuestro paquete en Pypi, necesitamos crear una cuenta en [Pypi](https://pypi.org/account/register/).

::: callout-tip
Una vez creada la cuenta en Pypi, necesitamos verificarla a trav√©s de un correo electr√≥nico que nos enviar√°n. Adicional a ello es necesario configurar un factor de doble autenticaci√≥n. Esto es indispensable para poder crear un token de acceso. El mismo que nos permitir√° subir nuestro paquete a Pypi.
:::

Una vez que hayamos creado la cuenta, necesitamos crear un archivo llamado **.pypirc** en nuestro directorio de usuario con la siguiente informaci√≥n:

``` text
[pypi]
  username = statick
  password = pypi-token
```

En el archivo **.pypirc**, reemplazamos **username** con nuestro nombre de usuario de Pypi y **password** con nuestro token de acceso de Pypi.

::: callout-tip
En sistemas operativos basados en Unix, el archivo **.pypirc** se encuentra en el directorio de usuario **\~/.pypirc**.

En sistemas operativos basados en Windows, el archivo **.pypirc** se encuentra en el directorio de usuario **C:**\Users\username.pypirc.
:::

# Publicar el paquete en Pypi

Para publicar nuestro paquete en Pypi, necesitamos instalar el paquete **twine**.

Twine es una herramienta que nos permite subir paquetes de Python a Pypi.

``` bash
pip install twine
```

Es recomandable que tengamos la √∫ltima versi√≥n de **twine**.

``` bash
pip install --upgrade twine
```

Una vez que hayamos instalado y actualizado **twine**, podemos publicar nuestro paquete en Pypi de la siguiente manera:

``` bash
python -m pip install --upgrade build
```

El comando anterior instala el paquete **build** que necesitamos para construir nuestro paquete.

``` bash
python -m build
```

El comando anterior crea un archivo **dist** en el directorio ra√≠z de nuestro paquete. Este archivo contiene el paquete que vamos a publicar en Pypi. Es decir los archivos **.tar.gz** y **.whl**.

Estos archivos son los que vamos a subir a Pypi.

``` bash
python -m twine upload --repository pypi dist/* --verbose
```

El comando anterior sube nuestro paquete a Pypi. El archivo **.pypirc** contiene la informaci√≥n de autenticaci√≥n que necesitamos para subir nuestro paquete.

:::{.center}
![](images/paste-10.png)
:::

¬°Y eso es todo! Ahora puedes compartir tu paquete de Python con otros desarrolladores en Pypi. En el caso de este paquete la url es [status_checker_api](https://pypi.org/project/status-checker-api/).

# Instalar el paquete

Para instalar el paquete que acabamos de publicar en Pypi, necesitamos usar **pip**.

:::{.center}
![](images/paste-4.png)
:::

``` bash
pip install status_checker_api
```

Una vez que hayamos instalado el paquete, podemos utilizarlo en nuestro c√≥digo de Python.

# Uso del paquete

``` bash
api-status-checker
```
:::{.center}
![](images/paste-11.png)
:::

Es necesario ingresar la URL de la API que queremos verificar.

**Ingrese la URL de la API:** https://www.google.com

**El status de la API es:** 200

¬°Y eso es todo! Ahora puedes actualizar tu paquete de Python en Pypi.

::: callout-tip
No olvides cambiar la versi√≥n de tu paquete en el archivo **setup.py** antes de subirlo a Pypi si realizas alguna actualizaci√≥n.
:::

Si decidimos actualizar el paquete en Pypi, necesitamos seguir los mismos pasos que hemos visto en este tutorial.

Sin embargo solo necesitaremos 2 comandos:

``` bash
python -m build
```

``` bash
python -m twine upload --repository pypi dist/* --verbose
```

:::{.callout-tip}
En el directorio dist se generan los archivos **.tar.gz** y **.whl** que son los que vamos a subir a Pypi. Es necesario eliminar los archivos anteriores antes de subir los nuevos en este directorio, mi recomendaci√≥n es eliminar el directorio **dist** y volver a ejecutar el comando **python -m build**.
:::


# Conclusi√≥n

En este tutorial aprendimos c√≥mo publicar un paquete de Python en Pypi. Pudimos ver c√≥mo crear un paquete de Python, subirlo a Pypi y compartirlo con otros desarrolladores.
:::