# CRUD en React con API REST

## Requisitos previos:

*    Node.js y npm (o yarn, o pnpm) instalados en tu sistema.
*    Conocimientos básicos de React y JavaScript.
*    Backend (API) funcionando, por ejemplo, usando Django REST API u otra API compatible.

1. Inicializa el proyecto de React

Primero, necesitas crear un proyecto de React. Vamos a usar npm create vite@latest para hacerlo de forma rápida:

```bash
npm create vite@latest nombre-del-proyecto
```
Sigue las indicaciones y selecciona react como plantilla. Luego navega al directorio del proyecto e instala las dependencias necesarias:

```bash
cd nombre-del-proyecto
npm install
```
2. Configura Axios para las solicitudes a la API

Axios es una librería que facilita las solicitudes HTTP. Crea un archivo api.js en la carpeta src/utils para configurar Axios con la URL base de tu API:

```bash
mkdir -p src/utils
touch src/utils/api.js
```
Ahora, edita el archivo api.js:

```javascript
import axios from 'axios';

const api = axios.create({
  baseURL: 'https://tu-api-backend.com/api', // Reemplaza esta URL con la URL de tu API
  headers: {
    'Content-Type': 'application/json',
  },
});

export default api;
```
Este archivo configura Axios con la base de la URL de tu API, facilitando la reutilización de este cliente HTTP en toda tu aplicación.

3. Configura las rutas y el sistema de navegación con react-router-dom

Para manejar las rutas de la aplicación, instala react-router-dom:

```bash
npm install react-router-dom
```
Modifica tu archivo src/App.jsx para agregar rutas:

```javascript
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import ProductList from './components/ProductList';
import ProductDetail from './components/ProductDetail';
import ProductForm from './components/ProductForm';

const App = () => {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/products" element={<ProductList />} />
        <Route path="/products/new" element={<ProductForm />} />
        <Route path="/products/edit/:id" element={<ProductForm />} />
        <Route path="/products/:id" element={<ProductDetail />} />
      </Routes>
    </Router>
  );
};

const Home = () => (
  <div>
    <h1>CRUD en React con API REST</h1>
    <p>Esta es una aplicación de ejemplo para realizar operaciones CRUD (Crear, Leer, Actualizar, Eliminar) en una API REST con React.</p>
    <p>Dirígete a <Link to="/products">Productos</Link> para comenzar.</p>
  </div>
);

export default App;
```
Aquí estamos usando react-router-dom para definir nuestras rutas. Tenemos rutas para listar los productos, crear uno nuevo, editar un producto existente y ver los detalles de un producto específico. También hemos agregado una ruta para una página de inicio con instrucciones.

4. Crea el componente ProductList (Leer)

Este componente mostrará una lista de productos obtenidos de la API:

```bash
mkdir -p src/components
touch src/components/ProductList.jsx
```
Ahora, edita ProductList.jsx para obtener y mostrar la lista de productos:

```javascript
import { useState, useEffect } from 'react';
import api from '../utils/api';
import { Link } from 'react-router-dom';

const ProductList = () => {
  const [products, setProducts] = useState([]);

  useEffect(() => {
    // Obtener todos los productos
    api.get('/products')
      .then(response => {
        setProducts(response.data);
      })
      .catch(error => {
        console.error("Error al obtener los productos: ", error);
      });
  }, []);

  return (
    <div>
      <h1>Lista de Productos</h1>
      <ul>
        {products.map(product => (
          <li key={product.id}>
            <Link to={`/products/${product.id}`}>{product.name}</Link>
          </li>
        ))}
      </ul>
      <Link to="/products/new">Crear Nuevo Producto</Link>
    </div>
  );
};

export default ProductList;
```
Utilizamos useEffect para hacer la solicitud GET a la API cuando el componente se monta. Los productos obtenidos se almacenan en el estado products y se muestran en una lista con enlaces a los detalles de cada producto.

5. Crea el componente ProductDetail (Leer uno y eliminar)

Este componente mostrará los detalles de un producto específico y permitirá eliminarlo:

```bash
touch src/components/ProductDetail.jsx
```
Edita ProductDetail.jsx:

```javascript
import { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import api from '../utils/api';

const ProductDetail = () => {
  const { id } = useParams();
  const [product, setProduct] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    // Obtener los detalles de un producto
    api.get(`/products/${id}`)
      .then(response => {
        setProduct(response.data);
      })
      .catch(error => {
        console.error("Error al obtener el producto: ", error);
      });
  }, [id]);

  const handleDelete = () => {
    // Eliminar producto
    api.delete(`/products/${id}`)
      .then(() => {
        navigate('/products');
      })
      .catch(error => {
        console.error("Error al eliminar el producto: ", error);
      });
  };

  if (!product) return <div>Cargando...</div>;

  return (
    <div>
      <h1>{product.name}</h1>
      <p>{product.description}</p>
      <button onClick={handleDelete}>Eliminar</button>
      <Link to={`/products/edit/${product.id}`}>Editar</Link>
    </div>
  );
};

export default ProductDetail;
```
Aquí usamos useParams para obtener el ID del producto de la URL. Hacemos una solicitud GET para obtener los detalles del producto y mostramos su nombre y descripción. También tenemos una función handleDelete que elimina el producto y redirige a la lista de productos.

6. Crea el componente ProductForm (Crear y Actualizar)

Este componente servirá tanto para crear un nuevo producto como para editar uno existente:

```bash
touch src/components/ProductForm.jsx
```
Edita ProductForm.jsx:

```javascript
import { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import api from '../utils/api';

const ProductForm = () => {
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const { id } = useParams();
  const navigate = useNavigate();

  useEffect(() => {
    if (id) {
      // Si hay un `id`, estamos editando un producto
      api.get(`/products/${id}`)
        .then(response => {
          const product = response.data;
          setName(product.name);
          setDescription(product.description);
        })
        .catch(error => {
          console.error("Error al obtener los detalles del producto: ", error);
        });
    }
  }, [id]);

  const handleSubmit = (e) => {
    e.preventDefault();
    const product = { name, description };

    if (id) {
      // Actualizar producto
      api.put(`/products/${id}`, product)
        .then(() => {
          navigate(`/products/${id}`);
        })
        .catch(error => {
          console.error("Error al actualizar el producto: ", error);
        });
    } else {
      // Crear nuevo producto
      api.post('/products', product)
        .then(() => {
          navigate('/products');
        })
        .catch(error => {
          console.error("Error al crear el producto: ", error);
        });
    }
  };

  return (
    <div>
      <h1>{id ? 'Editar Producto' : 'Crear Producto'}</h1>
      <form onSubmit={handleSubmit}>
        <div>
          <label>Nombre</label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
          />
        </div>
        <div>
          <label>Descripción</label>
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            required
          ></textarea>
        </div>
        <button type="submit">{id ? 'Actualizar' : 'Crear'}</button>
      </form>
    </div>
  );
};

export default ProductForm;
```
Este formulario maneja tanto la creación como la edición de productos. Si se pasa un ID a través de la URL, el formulario se rellenará con los datos del producto y permitirá la edición. Si no hay ID, se considera una creación de nuevo producto.

7. Ejecuta y prueba la aplicación

Finalmente, inicia el servidor de desarrollo y verifica que todo funcione correctamente:

```bash
npm run dev
```
Abre tu navegador y navega a <http://localhost:5173> (o la URL que indique el servidor de desarrollo) para probar tu aplicación CRUD.

# Conclusiones

En este tutorial, aprendiste a crear una aplicación CRUD en React que interactúa con una API REST. Implementamos las operaciones de Crear, Leer, Actualizar y Eliminar productos utilizando Axios para las solicitudes HTTP y react-router-dom para la navegación. Este es un ejemplo básico que puedes ampliar y personalizar según tus necesidades. ¡Esperamos que te haya sido útil!

:::{.callout-tip}
Si deseas profundizar en el tema, te recomendamos explorar otras funcionalidades como paginación, autenticación, validación de formularios, entre otros.
:::