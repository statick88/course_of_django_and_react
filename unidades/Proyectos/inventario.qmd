# Sistema de Inventario en Consola - Python

## Paso 1: Clonar el repositorio

Primero, clona el repositorio en tu máquina local. Abre una terminal y ejecuta el siguiente comando:

```bash
git clone <URL_DEL_REPOSITORIO>
cd <NOMBRE_DEL_REPOSITORIO>
```
## Paso 2: Crear y activar un entorno virtual

Es recomendable usar un entorno virtual para gestionar las dependencias del proyecto. Para crear y activar un entorno virtual, ejecuta los siguientes comandos:

```bash
python3 -m venv env
source env/bin/activate  # En Windows usa `env\Scripts\activate`
```
## Paso 3: Instalar dependencias

Instala las dependencias necesarias que están listadas en el archivo requirements.txt:

```bash
pip install -r requirements.txt
```
## Paso 4: Configurar la base de datos

Asegúrate de que la base de datos esté configurada correctamente. Puedes encontrar la configuración en el archivo **db/database.py**. 

Aquí está el código para ese archivo:

```python
import sqlite3

def create_connection():
    conn = sqlite3.connect("inventory.db")
    return conn

def create_table():
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS products (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT NOT NULL,
                        quantity INTEGER NOT NULL)''')
    conn.commit()
    conn.close()
```
## Paso 5: Ejecutar la aplicación

Para ejecutar la aplicación, simplemente ejecuta el archivo **main.py**:

```bash
python main.py
```

## Paso 6: Entender la estructura del proyecto

Familiarízate con la estructura del proyecto:

- **db/**: Contiene la configuración y scripts relacionados con la base de datos.
- **env/**: Contiene el entorno virtual.
- **inventory/**: Contiene los módulos principales de la aplicación, como actions.py y product.py.
- **main.py**: Punto de entrada de la aplicación.
- **requirements.txt**: Lista de dependencias del proyecto.
## Paso 7: Añadir un producto

Para añadir un producto, puedes modificar el archivo **inventory/product.py**. Aquí tienes un ejemplo de cómo se define la clase Product:

```python
class Product:
    def __init__(self, name, quantity):
        self.name = name
        self.quantity = quantity
```
## Paso 8: Ejecutar pruebas

Si tienes pruebas unitarias configuradas, puedes ejecutarlas para asegurarte de que todo funcione correctamente. Por ejemplo, si usas pytest, puedes ejecutar:

```bash
pytest
```
## Paso 9: Crear una imagen Docker (Opcional)

Si deseas crear una imagen Docker para tu aplicación, puedes usar el Dockerfile incluido. Ejecuta los siguientes comandos:

```bash
docker build -t nombre_de_tu_imagen .
docker run -p 8000:8000 nombre_de_tu_imagen
```
## Paso 10: Desactivar el entorno virtual

Cuando termines de trabajar, puedes desactivar el entorno virtual con el siguiente comando:

```bash
deactivate
```
# Código de los archivos principales

db/database.py

```python
import sqlite3

def create_connection():
    conn = sqlite3.connect("inventory.db")
    return conn

def create_table():
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS products (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT NOT NULL,
                        quantity INTEGER NOT NULL)''')
    conn.commit()
    conn.close()
```
inventory/actions.py

```python
from db.database import create_connection

def add_product(product):
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO products (name, quantity) VALUES (?, ?)", (product.name, product.quantity))
    conn.commit()
    conn.close()

def view_products():
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM products")
    products = cursor.fetchall()
    conn.close()
    return products

def update_product(product_id, new_quantity):
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE products SET quantity = ? WHERE id = ?", (new_quantity, product_id))
    conn.commit()
    conn.close()

def delete_product(product_id):
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM products WHERE id = ?", (product_id,))
    conn.commit()
    conn.close()
```
inventory/product.py

```python
class Product:
    def __init__(self, name, quantity):
        self.name = name
        self.quantity = quantity
```

.gitignore

```plaintext
# Entorno virtual
env/

# Archivos temporales
*.pyc
__pycache__/

# Archivos de bases de datos locales
*.db
```
Dockerfile

```dockerfile
# Usar la imagen oficial de Python
FROM python:3.12-slim

# Establecer el directorio de trabajo dentro del contenedor
WORKDIR /app

# Copiar los archivos del proyecto al contenedor
COPY . /app

# Instalar las dependencias especificadas en el archivo requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Comando para ejecutar la aplicación
CMD ["python", "main.py"]
```
main.py
```python
from inventory.product import Product
from inventory.actions import add_product, view_products, update_product, delete_product
from db.database import create_table

def menu():
    print("=== Sistema de Inventario ===")
    print("1. Agregar Producto")
    print("2. Ver Productos")
    print("3. Actualizar Producto")
    print("4. Eliminar Producto")
    print("5. Salir")

def main():
    create_table()
    while True:
        menu()
        choice = input("Selecciona una opción: ")
        
        if choice == '1':
            name = input("Nombre del producto: ")
            quantity = int(input("Cantidad: "))
            product = Product(name, quantity)
            add_product(product)
            print(f"Producto {name} agregado.")
        
        elif choice == '2':
            products = view_products()
            print("ID\tNombre\tCantidad")
            for product in products:
                print(f"{product[0]}\t{product[1]}\t{product[2]}")
        
        elif choice == '3':
            product_id = int(input("ID del producto a actualizar: "))
            new_quantity = int(input("Nueva cantidad: "))
            update_product(product_id, new_quantity)
            print(f"Producto {product_id} actualizado.")
        
        elif choice == '4':
            product_id = int(input("ID del producto a eliminar: "))
            delete_product(product_id)
            print(f"Producto {product_id} eliminado.")
        
        elif choice == '5':
            break
        else:
            print("Opción inválida. Intenta de nuevo.")

if __name__ == "__main__":
    main()
```
README.md

```markdown
# Sistema de Inventario en Consola - Python

Este proyecto es un sistema básico de inventario para la gestión de productos a nivel de consola. Utiliza Python con Programación Orientada a Objetos (POO) y almacena los datos en una base de datos SQLite.

## Características

- **Agregar productos:** Añade productos con nombre y cantidad.
- **Ver productos:** Lista todos los productos en el inventario.
- **Actualizar productos:** Modifica la cantidad de un producto existente.
- **Eliminar productos:** Borra productos del inventario.
- **Almacenamiento:** Utiliza una base de datos SQLite para almacenar los datos.
- **Interfaz amigable:** Menú interactivo a nivel de consola para la gestión del inventario.

## Requisitos

- Python 3.10 o superior
- pip (instalador de paquetes de Python)
- Docker (opcional para ejecutar en un entorno aislado)

## Instalación

1. Clonar el repositorio

   Clona este repositorio localmente:

   ```bash
   git clone https://github.com/tuusuario/sistema-bodega.git
   cd sistema-bodega
Crear un entorno virtual

Es recomendable usar un entorno virtual para aislar las dependencias:

bash
Copiar código
python3 -m venv env
source env/bin/activate  # o .\env\Scripts\activate en Windows
Instalar dependencias

Instala las dependencias definidas en el archivo requirements.txt:

bash
Copiar código
pip install -r requirements.txt
Uso del sistema
Ejecutar el sistema

Para iniciar el sistema de inventario, ejecuta el archivo main.py:

bash
Copiar código
python main.py
Menú del sistema

El sistema te mostrará un menú con las siguientes opciones:

plaintext
Copiar código
Bienvenido al Sistema de Inventario
1. Agregar un producto
2. Ver todos los productos
3. Actualizar un producto
4. Eliminar un producto
5. Salir
Opción 1: Agrega un nuevo producto proporcionando el nombre y la cantidad.
Opción 2: Visualiza la lista de productos existentes en el inventario.
Opción 3: Actualiza la cantidad de un producto existente especificando su ID.
Opción 4: Elimina un producto existente ingresando su ID.
Opción 5: Salir del sistema.
Ejecutar con Docker (opcional)
Para ejecutar la aplicación en un contenedor Docker, puedes usar el siguiente comando:

bash
Copiar código
docker build -t sistema-inventario .
docker run -it sistema-inventario
```
