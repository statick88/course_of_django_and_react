:::{.justify}
# Git y GitHub üïπÔ∏è

::: center
![Git and Github](../../images/git_and_github.png){fig-align="center" width="400"}
:::

## ¬øQu√© es Git y GitHub? üïπÔ∏è

- Git y GitHub son herramientas ampliamente utilizadas en el desarrollo de software para el control de versiones y la colaboraci√≥n en proyectos. 

- Git es un sistema de control de versiones distribuido que permite realizar un seguimiento de los cambios en el c√≥digo fuente durante el desarrollo de software. Fue creado por Linus Torvalds en 2005 y se utiliza mediante la l√≠nea de comandos o a trav√©s de interfaces gr√°ficas de usuario.

- GitHub, por otro lado, es una plataforma de alojamiento de repositorios Git en la nube. Proporciona un entorno colaborativo donde los desarrolladores pueden compartir y trabajar en proyectos de software de forma conjunta. Adem√°s, ofrece caracter√≠sticas adicionales como seguimiento de problemas, solicitudes de extracci√≥n y despliegue continuo.

En este tutorial, aprender√°s los conceptos b√°sicos de Git y GitHub, as√≠ como su uso en un proyecto de software real.

::: center
## ¬øQui√©nes utilizan Git? üåç
:::

::: center
![Git](../../images/git-logo-sticker.png){fig-align="center" width="600"}
:::

Es ampliamente utilizado por desarrolladores de software en todo el mundo, desde estudiantes hasta grandes empresas tecnol√≥gicas. Es una herramienta fundamental para el desarrollo colaborativo y la gesti√≥n de proyectos de software.

## ¬øC√≥mo se utiliza Git? üíª

![Git en Terminal](../../images/git_terminal.png){fig-align="center" width="600"}

Se utiliza mediante la **l√≠nea de comandos** o a trav√©s de **interfaces gr√°ficas** de usuario. Proporciona comandos para realizar operaciones como:

1. Inicializar un repositorio, 
2. Realizar cambios, 
3. Revisar historial, 
4. Fusionar ramas, 
5. Entre otros.

## ¬øPara qu√© sirve Git? üìù

::: center
![Seguimiento de Cambios con Git](../../images/seguimiento_cambios_git.png){fig-align="center" width="600"}
:::

Sirve para realizar un seguimiento de los cambios en el c√≥digo fuente, coordinar el trabajo entre varios desarrolladores, revertir cambios no deseados y mantener un historial completo de todas las modificaciones realizadas en un proyecto.

## ¬øPor qu√© utilizar Git? ü§î

::: center
![Ventajas de Git](../../images/ventajas_git.jpg){fig-align="center" width="600"}
:::

Ofrece varias ventajas, como:

-   La capacidad de trabajar de forma distribuida 
-   La gesti√≥n eficiente de ramas para desarrollar nuevas funcionalidades 
-   Corregir errores sin afectar la rama principal
-   La posibilidad de colaborar de forma efectiva con otros desarrolladores.

## ¬øD√≥nde puedo utilizar Git? üåê

::: center
![Git en Diferentes Sistemas Operativos](../../images/sistemas_operativos_git.png){fig-align="center" width="600"}
:::

Puede ser utilizado en cualquier sistema operativo, incluyendo Windows, macOS y Linux. Adem√°s, es compatible con una amplia variedad de plataformas de alojamiento de repositorios, siendo GitHub una de las m√°s populares.

::: center
## Pasos B√°sicos üìù
:::

::: {.callout-tip}
Es recomendable tomar en cuenta una herramienta para la edici√≥n de c√≥digo, como Visual Studio Code, Sublime Text o Atom, para trabajar con Git y GitHub de manera eficiente.
:::

::: center
## Instalaci√≥n de Visual Studio Code üì•

![Visual Studio Code](../../images/vscode.png){fig-align="center" width="600"}
:::

Si a√∫n no tienes Visual Studio Code instalado, puedes descargarlo desde [https://code.visualstudio.com/download](https://code.visualstudio.com/download). Es una herramienta gratuita y de c√≥digo abierto que proporciona una interfaz amigable para trabajar con Git y GitHub.

A continuaci√≥n se presentan los pasos b√°sicos para utilizar Git y GitHub en un proyecto de software.

### Descarga e Instalaci√≥n de Git üì•

::: center
![Git](../../images/website-git.png){fig-align="center" width="600"}
:::

1. Visita el sitio web oficial de Git en [https://git-scm.com/downloads](https://git-scm.com/downloads).
2. Descarga el instalador adecuado para tu sistema operativo y sigue las instrucciones de instalaci√≥n.

### Configuraci√≥n üõ†Ô∏è

::: center
![Configuraci√≥n de Git](../../images/git_config.png){fig-align="center" width="600"}
:::

Una vez instalado Git, es necesario configurar tu nombre de usuario y direcci√≥n de correo electr√≥nico. Esto se puede hacer mediante los siguientes comandos:

```bash
git config --global user.name "Tu Nombre"
git config --global user.email "tu@email.com"
```
### Creaci√≥n de un Repositorio "helloWorld" en Python üêç

- Crea una nueva carpeta para tu proyecto y √°brela en Visual Studio Code.
- Crea un archivo Python llamado **hello_world.py** y escribe el siguiente c√≥digo:

```python
def welcome_message():
    name = input("Ingrese su nombre: ")
    print("Bienvenio,", name, "al curso de Django y React!")

if __name__ == "__main__":
    welcome_message()
```
- Guarda el archivo y abre una terminal en Visual Studio Code.
- Inicializa un repositorio Git en la carpeta de tu proyecto con el siguiente comando:

```bash
git init
```
- A√±ade el archivo al √°rea de preparaci√≥n con:

``` bash
git add hello_world.py
```
- Realiza un commit de los cambios con un mensaje descriptivo:

``` bash
git commit -m "A√±adir archivo hello_world.py"
```
### Comandos B√°sicos de Git üìù

- **git init:** Inicializa un nuevo repositorio Git.
- **git add <archivo>:** A√±ade un archivo al √°rea de preparaci√≥n.
- **git commit -m "<mensaje>"**: Realiza un commit de los cambios con un mensaje descriptivo.
- **git push:** Sube los cambios al repositorio remoto.
- **git pull:** Descarga cambios del repositorio remoto.
- **git branch:** Lista las ramas disponibles.
- **git checkout <nombre_rama>:** Cambia a una rama espec√≠fica.
- **git merge <nombre_rama>:** Fusiona una rama con la rama actual.
- **git reset <archivo>:** Descarta los cambios en un archivo.
- **git diff:** Muestra las diferencias entre versiones.

### Estados en Git üìä

- **Local:** Representa los cambios que realizas en tu repositorio local antes de hacer un commit. Estos cambios est√°n √∫nicamente en tu m√°quina.
- **Staging:** Indica los cambios que has a√±adido al √°rea de preparaci√≥n con el comando `git add`. Estos cambios est√°n listos para ser confirmados en el pr√≥ximo commit.
- **Commit:** Son los cambios que has confirmado en tu repositorio local con el comando `git commit`. Estos cambios se han guardado de manera permanente en tu repositorio local.
- **Server:** Son los cambios que has subido al repositorio remoto con el comando `git push`. Estos cambios est√°n disponibles para otros colaboradores del proyecto.
---
::: {.text-center}
# Tutorial: Moviendo Cambios entre Estados en Git üìù

## Introducci√≥n
:::

En este tutorial, aprenderemos a utilizar Git para gestionar cambios en nuestro proyecto y moverlos entre diferentes estados. Utilizaremos un ejemplo pr√°ctico para comprender mejor estos conceptos.

``` python
def welcome_message():
    name = input("Ingrese su nombre: ")
    print("Bienvenio,", name, "al curso de Django y React!")

if __name__ == "__main__":
    welcome_message()
```

## Secci√≥n 1: Modificar Archivos en el Repositorio

En esta secci√≥n, aprenderemos c√≥mo realizar cambios en nuestros archivos y reflejarlos en Git.

## Mover Cambios de Local a Staging:

1. Abre el archivo **hello_world.py** en Visual Studio Code.
2. Modifica el mensaje de bienvenida a "Bienvenido" en lugar de "Bienvenio".
3. Guarda los cambios y abre una terminal en Visual Studio Code.

Hemos corregido un error en nuestro archivo y queremos reflejarlo en Git.

``` bash
def welcome_message():
    name = input("Ingrese su nombre: ")
    print("Bienvenido,", name, "al curso de Django y React!")

if __name__ == "__main__":
    welcome_message()
```

## Agregar Cambios de Local a Staging:

``` bash
git add hello_world.py
```

Hemos a√±adido los cambios al √°rea de preparaci√≥n y est√°n listos para ser confirmados en el pr√≥ximo commit.

## Secci√≥n 2: Confirmar Cambios en un Commit

En esta secci√≥n, aprenderemos c√≥mo confirmar los cambios en un commit y guardarlos de manera permanente en nuestro repositorio.

## Mover Cambios de Staging a Commit:

``` bash
git commit -m "Corregir mensaje de bienvenida"
```

Hemos confirmado los cambios en un commit con un mensaje descriptivo.

## Secci√≥n 3: Creaci√≥n y Fusi√≥n de Ramas

En esta secci√≥n, aprenderemos c√≥mo crear y fusionar ramas en Git para desarrollar nuevas funcionalidades de forma aislada.

## Crear una Nueva Rama:

``` bash
git branch feature
```

Hemos creado una nueva rama llamada "feature" para desarrollar una nueva funcionalidad.

## Implementar Funcionalidades en la Rama:

1. Abre el archivo **hello_world.py** en Visual Studio Code.
2. A√±ade una nueva funci√≥n para mostrar un mensaje de despedida.
3. Guarda los cambios y abre una terminal en Visual Studio Code.
4. A√±ade los cambios al √°rea de preparaci√≥n y conf√≠rmalos en un commit.
5. Cambia a la rama principal con `git checkout main`.

## Fusionar Ramas con la Rama Principal:

``` bash
git merge feature
```

Hemos fusionado la rama "feature" con la rama principal y a√±adido la nueva funcionalidad al proyecto.

## Secci√≥n 4: Revertir Cambios en un Archivo

En esta secci√≥n, aprenderemos c√≥mo revertir cambios en un archivo y deshacerlos en Git.

## Revertir Cambios en un Archivo:

``` bash
git reset hello_world.py
```

Hemos revertido los cambios en el archivo **hello_world.py** y deshecho las modificaciones realizadas.

## Conclusi√≥n

En este tutorial, hemos aprendido a gestionar cambios en nuestro proyecto y moverlos entre diferentes estados en Git. Estos conceptos son fundamentales para trabajar de forma eficiente en proyectos de software y colaborar con otros desarrolladores.

# Asignaci√≥n

[Hello World!](https://classroom.github.com/a/o-qydr2W)

Este proyecto de ejemplo est√° escrito en Python y se prueba con pytest.

**La Asignaci√≥n**

Las pruebas est√°n fallando en este momento porque el m√©todo no est√° devolviendo la cadena correcta. Corrige el c√≥digo del archivo **hello.py** para que las pruebas sean exitosas, debe devolver la cadena correcta **"Hello World!"**x

El comando de ejecuci√≥n del test es:

``` bash
pytest test_hello.py
```
::: {.text-center}
¬°Mucha suerte!
:::
:::
